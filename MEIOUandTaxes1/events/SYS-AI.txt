namespace = AI_Budget

country_event = {
    id = AI_Budget.1
    title = no_localisation
    desc = no_localisation
	picture = ai_only

    hidden = yes

    is_triggered_only = yes

    trigger = {
        ai = yes
		
		isValidCountry = yes
    }

    immediate = {
		AI_ReformMain = yes
    }

    option = {
        name = no_localisation
    }
}

country_event = {
    id = AI_Budget.2
    title = no_localisation
    desc = no_localisation
	picture = ai_only

    hidden = yes

    is_triggered_only = yes

    trigger = {
        ai = yes
		
		isValidCountry = yes
    }

    immediate = {
		AI_InteractionsMain = yes
    }

    option = {
        name = no_localisation
    }
}

country_event = {
    id = AI_Budget.3
    title = no_localisation
    desc = no_localisation
	picture = ai_only

    hidden = yes

    is_triggered_only = yes

    trigger = {
        ai = yes
		
		isValidCountry = yes
    }

    immediate = {
		AI_InteractionsDoAll = { grant = yes revoke = yes privileges = yes }
    }

    option = {
        name = no_localisation
    }
}

# THIS EVENT DOES DO SOMETHING
country_event = {
    id = AI_Budget.11
    title = no_localisation
    desc = no_localisation
	picture = ai_only

    hidden = yes

    is_triggered_only = yes
	
	trigger = {
        ai = yes
		
		isValidCountry = yes
    }

    immediate = {

		## get Treasury - ((Monthly_Income >= 1)*36)
		export_to_key = { lhs = Tmp_0 value = treasury }
		export_to_key = { lhs = Tmp_1 value = monthly_income }
		
		if = {
			limit = {
				NOT = {
					check_key = { lhs = Tmp_1 value = 1 }
				}
			}
			set_key = { lhs = Tmp_1 value = 1 }
		}
		
		multiply_key = { lhs = Tmp_1 value = 36 }
		
		subtract_key = { lhs = Tmp_0 which = Tmp_1 }
		
		if = {
			limit = {
				check_key = { lhs = Tmp_0 value = 400 } # if the above is greater 400
			}
			divide_key = { lhs = Tmp_1 value = 2 } # divide monthly income * 36 (3years of income) by 2
			change_key = { lhs = Tmp_0 which = Tmp_1 } # add 1.5 years of income to treasury
			

			every_owned_province = {
				limit = {
					Infra_CanAmenities = yes
					NOT = { check_key = { lhs = Infra_Amenities value = 7 } }
				}

				Infra_GetAmenities_Cap = { inp = Tmp_3 }
				get_global_define = { define = DEFINE_AI_BUILDS_AMENITIES_POP_RATIO_BELOW_CAP }
				multiply_key = { lhs = Tmp_3 which = DEFINE_AI_BUILDS_AMENITIES_POP_RATIO_BELOW_CAP }
				clear_global_define = { define = DEFINE_AI_BUILDS_AMENITIES_POP_RATIO_BELOW_CAP }
				if = {
					limit = {
						check_key = { lhs = RE_Total which = Tmp_3 } # If residents are above the cap
					}

					set_key = { lhs = Tmp_2 which = Infra_Amenities }
					change_key = { lhs = Tmp_2 value = 1 }
					Infra_GetGoalAmenities = { inp = Tmp_2 return = Tmp_8 } # Get amount of units to build for goal rank

					subtract_key = { lhs = Tmp_8 which = Infra_AmenitiesSize } # subtract current unit size
					subtract_key = { lhs = Tmp_8 which = Infra_InConstAmenities } # units in construction

					if = {
						limit = {
							NOT = {
								check_key = { lhs = Tmp_8 value = 1 }
							}
						}
						set_key = { lhs = Tmp_8 value = 0 }
					}
					else = {
						set_key = { lhs = Tmp_9 which = Tmp_8 }
						multiply_key = { lhs = Tmp_9 which = Infra_AmenitiesSizeCost1 } # cost per size ? --> this should be total costs for construction
					}

					if = {
						limit = {
							check_key = { lhs = Tmp_0 which = Tmp_9 } # if budget greater costs
							check_key = { lhs = Tmp_8 value = 1 } # more than 1 unit to build
						}

						subtract_key = { lhs = Tmp_0 which = Tmp_9 }
						POP_RemoveDucat = { type = which inp = Tmp_9 }

						PREV = {
							change_key = { lhs = Infra_Wealth which = Tmp_9 }

							set_key = { lhs = Tmp_9 value = 4 }

							Infra_StartProject = { id = 10 height = Tmp_8 width = Tmp_9 } # height = amount of units, width = amount of paralelism

							set_key = { lhs = Tmp_2 value = 0 }
						}
					}
				}
			}
			

			


			### Calculate CE for deciding where to build pathing and harbourage
			# Initialization
			set_key = { lhs = tv_owned_provinces_in_state_in_progress value = 0 }
			set_key = { lhs = tv_port value = 0 }

			# Get Highest Overlord in tt_highest event_target (max 2 levels of subject relationships)
			if = {
				limit = {
					is_subject = yes
				}
				overlord = {
					if = {
						limit = {
							is_subject = yes
						}
						overlord = {
							save_event_target_as = tt_highest
						}
					}
					else = {
						save_event_target_as = tt_highest
					}
				}
			}
			else = {
				save_event_target_as = tt_highest
			}

			export_ship_speed_multiplier_effect = { which = tv_ship } # Get Hardcoded Ship Speed modifier based on techs

			# Add modifier as key to all port provinces
			sea_starts = {
				set_key = { lhs = tv_ship which = ROOT }
			}

			## Loop through every non empty province hold by overlord and all his subjects - Treat HRE and Japan as an area
			every_province = {
				limit = {
					isValidProv = yes
					OR = {
						country_or_vassal_holds = event_target:tt_highest
						owner = { overlord = { is_subject_of = event_target:tt_highest } }
						AND = {
							owner = { is_part_of_hre = yes }
							event_target:tt_highest = { is_part_of_hre = yes }
						}
						AND = {
							owner = { daimyo_trigger = yes }
							event_target:tt_highest = { daimyo_trigger = yes }
						}
					}
				}
				
				set_key = { lhs = tv_ship which = ROOT } # Get ship spead

				# Count total amount of port provinces
				if = {
					limit = {
						has_port = yes
					}
					ROOT = {
						change_key = { lhs = tv_port value = 1 }
					}
				}

				# Count total amount of owned provinces
				if = {
					limit = {
						owned_by = ROOT
					}
					ROOT = {
						change_key = { lhs = tv_owned_provinces_in_state_in_progress value = 1 }
					}
				}

				ce_get_cost_land_best = { return = tv_cost_land } # Get pathing CE reduction
				ce_get_cost_port_embark_best = { return = tv_cost_port_embark } # Get Harbourage CE Embark Reduction
				ce_get_cost_port_to_best = { return = tv_cost_port_to } # Get Pathing landing CE reduction
				
				set_key = { lhs = Tmp_7 value = 0 }
			}

			# Set runner_dispatching_province
			capital_scope = {
				set_key = { lhs = tv_tt value = 0 }
				
				if = {
					limit = {
						ROOT = {
							check_key = { lhs = tv_owned_provinces_in_state_in_progress value = 1 }
						}
					}
					save_event_target_as = runner_dispatching_province
				}
			}

			# Main loop
			while = {
				limit = {
					event_target:runner_dispatching_province = { # this is the capital
						NOT = { has_province_flag = tf_communication_efficiency_final } # while CE unifinished
					}
				}

				event_target:runner_dispatching_province = {
					set_province_flag = tf_communication_efficiency_final
					
					# subtract total amount of provinces to calculate by 1
					if = {
						limit = {
							owned_by = ROOT
						}
						ROOT = {
							subtract_key = { lhs = tv_owned_provinces_in_state_in_progress value = 1 }
						}
					}
					if = {
						limit = {
							has_port = yes
						}
						ROOT = { 
							subtract_key = { lhs = tv_port value = 1 }
						}
					}

					# 
					if = {
						limit = {
							ROOT = {
								check_key = { lhs = tv_owned_provinces_in_state_in_progress value = 1 }
							}
						}
						ce_do_river = { # do river CE
							prev = Tmp_7
						}
						ce_do_land = { # do land CE
							prev = Tmp_7
						}

						if = {
							limit = {
								ROOT = { 
									check_key = { lhs = tv_port value = 1 }
								}
							}
							ce_do_sea = { # do sea CE
								prev = Tmp_7
							}
						}
					}
				}

				if = {
					limit = {
						check_key = { lhs = tv_owned_provinces_in_state_in_progress value = 1 }
					}
					ce_set_runner_dispatching_province_land = {
						scope = every_owned_province
						max = 1440
						overlord = yes
						subject = yes
						hre = yes
					}

					if = {
						limit = {
							check_key = { lhs = tv_port value = 1 }
						}
						ce_set_runner_disptaching_province_sea = {
							max = 1440
						}
					}
				}
			}
			
			every_province = {
				limit = {
					check_key = { lhs = tv_cost_land value = 0.001 }
				}
				if = {
					limit = {
						owned_by = ROOT
						
						check_key = { lhs = tv_tt value = 0.001 }
					}
					set_key = { lhs = Tmp_0 which = Dev_Total }
				}
				else = {
					set_key = { lhs = Tmp_0 value = 0 }
				}
				
				set_key = { lhs = Tmp_1 value = 0 }
				set_key = { lhs = Tmp_2 value = 0 }
			}
			
			set_global_flag = tf_run
			
			while = {
				limit = {
					has_global_flag = tf_run
				}
				clr_global_flag = tf_run
				
				every_province = {
					limit = {
						check_key = { lhs = tv_cost_land value = 0.001 }
						check_key = { lhs = Tmp_0 value = 0.001 }
						
						NOT = {
							has_province_flag = tf_run
						}
					}
					set_key = { lhs = Tmp_9 which = Tmp_7 }
					set_key = { lhs = Tmp_7 which = ID_Prov }
					
					if = {
						limit = {
							NOT = {
								any_province = {
									NOT = {
										province_id = PREV
									}
									
									check_key = { lhs = tv_cost_land value = 0.001 }
									check_key = { lhs = Tmp_0 value = 0.001 }
									
									is_key_equal = { lhs = Tmp_7 which = PREV }
									
									NOT = {
										has_province_flag = tf_run
									}
								}
							}
						}
						set_global_flag = tf_run
						set_province_flag = tf_run
						
						POP_GetProv = { var = Tmp_9 return = Prov }
						
						event_target:Prov = {
							set_key = { lhs = Tmp_8 which = Tmp_0 }
							set_key = { lhs = Tmp_0 which = PREV }
							
							if = {
								limit = {
									PREV = {
										OR = {
											has_province_flag = tf_river
											
											NOT = {
												any_neighbor_province = {
													province_id = event_target:Prov
												}
											} 
										}
									}
								}
								change_key = { lhs = Tmp_2 which = Tmp_0 }
								
								PREV = {
									change_key = { lhs = Tmp_2 which = Tmp_0 }
								}
							}
							else = {
								change_key = { lhs = Tmp_1 which = Tmp_0 }
								
								PREV = {
									change_key = { lhs = Tmp_1 which = Tmp_0 }
								}
							}
							
							set_key = { lhs = Tmp_0 which = Tmp_8 }
							change_key = { lhs = Tmp_0 which = PREV }
							
							set_key = { lhs = Tmp_8 value = 0 }
						}
					}
					
					set_key = { lhs = Tmp_7 which = Tmp_9 }
					
					set_key = { lhs = Tmp_9 value = 0 }
				}
			}
			
			every_province = {
				limit = {
					check_key = { lhs = tv_cost_land value = 0.001 }
				}
				if = {
					limit = {
						has_province_flag = tf_run
					}
					clr_province_flag = tf_run
				}
				if = {
					limit = {
						has_province_flag = tf_river
					}
					clr_province_flag = tf_river
				}
				
				set_key = { lhs = Tmp_0 value = 0 }
			}
			
			every_owned_province = {
				limit = {
					check_key = { lhs = tv_cost_land value = 0.001 }
					
					OR = {
						check_key = { lhs = Tmp_1 value = 0.001 }
						check_key = { lhs = Tmp_2 value = 0.001 }
					}
				}
				if = {
					limit = {
						check_key = { lhs = Infra_Pathing value = 7 }
					}
					set_key = { lhs = Tmp_1 value = 0 }
					set_key = { lhs = Tmp_6 value = 0 }
					set_key = { lhs = Tmp_7 value = 0 }
				}
				else = {
					set_key = { lhs = Tmp_0 which = Infra_Pathing }
					change_key = { lhs = Tmp_0 value = 1 }
					
					Infra_GetGoalPathing = { inp = Tmp_0 return = Tmp_6 }
					subtract_key = { lhs = Tmp_6 which = Infra_PathingSize }
					subtract_key = { lhs = Tmp_6 which = Infra_InConstPathing }
					
					if = {
						limit = {
							NOT = {
								check_key = { lhs = Tmp_6 value = 1 }
							}
						}
						set_key = { lhs = Tmp_1 value = 0 }
						set_key = { lhs = Tmp_6 value = 0 }
						set_key = { lhs = Tmp_7 value = 0 }
					}
					else = {
						set_key = { lhs = Tmp_7 which = Tmp_6 }
						multiply_key = { lhs = Tmp_7 which = Infra_PathingSizeCost1 }
						
						divide_key = { lhs = Tmp_1 which = Tmp_7 }
						divide_key = { lhs = Tmp_1 which = Tmp_0 }
						divide_key = { lhs = Tmp_1 which = Tmp_0 }
					}
				}
				
				if = {
					limit = {
                        OR = {
                            Infra_CanHarbourage = no
                            check_key = { lhs = Infra_Harbourage value = 7 }
                        }
					}
					set_key = { lhs = Tmp_2 value = 0 }
					set_key = { lhs = Tmp_8 value = 0 }
					set_key = { lhs = Tmp_9 value = 0 }
				}
				else = {
					set_key = { lhs = Tmp_0 which = Infra_Harbourage }
					change_key = { lhs = Tmp_0 value = 1 }
					
					Infra_GetGoalHarbourage = { inp = Tmp_0 return = Tmp_8 }
					subtract_key = { lhs = Tmp_8 which = Infra_HarbourageSize }
					subtract_key = { lhs = Tmp_8 which = Infra_InConstHarbourage }
					
					if = {
						limit = {
							NOT = {
								check_key = { lhs = Tmp_8 value = 1 }
							}
						}
						set_key = { lhs = Tmp_2 value = 0 }
						set_key = { lhs = Tmp_8 value = 0 }
						set_key = { lhs = Tmp_9 value = 0 }
					}
					else = {
						set_key = { lhs = Tmp_9 which = Tmp_8 }
						multiply_key = { lhs = Tmp_9 which = Infra_HarbourageSizeCost1 }
						
						divide_key = { lhs = Tmp_2 which = Tmp_9 }
						divide_key = { lhs = Tmp_2 which = Tmp_0 }
						divide_key = { lhs = Tmp_2 which = Tmp_0 }
					}
				}
				
				if = {
					limit = {
						check_key = { lhs = Tmp_1 which = Tmp_2 }
					}
					set_key = { lhs = Tmp_0 which = Tmp_1 }
				}
				else = {
					set_key = { lhs = Tmp_0 which = Tmp_2 }
				}
			}
			
			set_key = { lhs = Tmp_1 which = Tmp_0 }
			
			while = {
				limit = {
					check_key = { lhs = Tmp_1 value = 0.001 }
				}
				save_event_target_as = Prov
				
				set_key = { lhs = Tmp_0 value = -1 }
				
				every_owned_province = {
					limit = {
						check_key = { lhs = tv_cost_land value = 0.001 }
						check_key = { lhs = Tmp_0 value = 0.001 }
						check_key = { lhs = Tmp_0 which = event_target:Prov }
					}
					save_event_target_as = Prov
				}
				
				event_target:Prov = {
					if = {
						limit = {
							is_key_equal = { lhs = Tmp_0 value = -1 }
						}
						PREV = {
							set_key = { lhs = Tmp_1 value = 0 }
						}
					}
					else = {
						if = {
							limit = {
								is_key_equal = { lhs = Tmp_0 which = Tmp_1 }
							}
							PREV = {
								set_key = { lhs = Tmp_7 which = PREV }
								
								if = {
									limit = {
										check_key = { lhs = Tmp_1 which = Tmp_7 }
									}
									subtract_key = { lhs = Tmp_1 which = Tmp_7 }
									POP_RemoveDucat = { type = which inp = Tmp_7 }
									
									PREV = {
										change_key = { lhs = Infra_Wealth which = Tmp_7 }
							
										set_key = { lhs = Tmp_7 value = 2 }
										
										Infra_StartProject = { id = 8 height = Tmp_6 width = Tmp_7 }
										
										set_key = { lhs = Tmp_1 value = 0 }
										set_key = { lhs = Tmp_0 which = Tmp_2 }
									}
								}
								else = {
									set_key = { lhs = Tmp_1 value = 0 }
								}
							}
						}
						else = {
							PREV = {
								set_key = { lhs = Tmp_9 which = PREV }
								
								if = {
									limit = {
										check_key = { lhs = Tmp_1 which = Tmp_9 }
									}
									subtract_key = { lhs = Tmp_1 which = Tmp_9 }
									POP_RemoveDucat = { type = which inp = Tmp_9 }
									
									PREV = {
										change_key = { lhs = Infra_Wealth which = Tmp_9 }
							
										set_key = { lhs = Tmp_9 value = 2 }
										
										Infra_StartProject = { id = 9 height = Tmp_8 width = Tmp_9 }
										
										set_key = { lhs = Tmp_2 value = 0 }
										set_key = { lhs = Tmp_0 which = Tmp_1 }
									}
								}
								else = {
									set_key = { lhs = Tmp_1 value = 0 }
								}
							}
						}
					}
				}
			}
			
			# Clear all temporary variables
			ce_cleanup = yes
			
			every_province = {
				set_key = { lhs = Tmp_0 value = 0 }
				set_key = { lhs = Tmp_1 value = 0 }
				set_key = { lhs = Tmp_2 value = 0 }
				set_key = { lhs = Tmp_3 value = 0 }
				set_key = { lhs = Tmp_4 value = 0 }
				set_key = { lhs = Tmp_5 value = 0 }
				set_key = { lhs = Tmp_6 value = 0 }
				set_key = { lhs = Tmp_7 value = 0 }
				set_key = { lhs = Tmp_8 value = 0 }
				set_key = { lhs = Tmp_9 value = 0 }
			}
			
			set_key = { lhs = Tmp_2 value = 0 }
			set_key = { lhs = Tmp_3 value = 0 }
			set_key = { lhs = Tmp_4 value = 0 }
			set_key = { lhs = Tmp_5 value = 0 }
			set_key = { lhs = Tmp_6 value = 0 }
			set_key = { lhs = Tmp_7 value = 0 }
			set_key = { lhs = Tmp_8 value = 0 }
			set_key = { lhs = Tmp_9 value = 0 }
		}
		
		set_key = { lhs = Tmp_0 value = 0 }
		set_key = { lhs = Tmp_1 value = 0 }
    }

    option = {
        name = no_localisation
    }
}