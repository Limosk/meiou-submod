Infra_SetBuildingMax = { #sets max limit for some types of buildings
	set_key = { lhs = Building_AgricultureMax which = Land_Size }
	multiply_key = { lhs = Building_AgricultureMax which = Modi_AgricultureMax }
	
	set_key = { lhs = Building_ForestryMax which = Land_Forest }
	multiply_key = { lhs = Building_ForestryMax which = Modi_ForestryMax }
	
	set_key = { lhs = Building_ExtractionMax which = Land_Resource }
	if = {
		limit = {
			has_province_flag = coal
			OR = {
				has_province_flag = m
				has_province_flag = salt
				has_port = yes
				has_province_flag = ivory
				has_province_flag = pearls
			}
			Prod_NotHasProd = { Prod=14 }
		}
		if = {
			limit = {
				OR = {
					province_id = 5483 	#Xinzhou, North China
					province_id = 722 	#Ordos, Inner Mongolia
					province_id = 480 	#Kulunda, Kazakh Steppe
					province_id = 86 	#Oberstift, Westphalia
					province_id = 2507 	#Belz, Ruthenia
				}
			}
			subtract_key = { lhs = Building_ExtractionMax value = 80 }
		}
		else_if = {
			limit = {
				OR = {
					province_id = 2467	#Zezhou, North China
					province_id = 5119	#Baota, North China
					province_id = 2471	#Pingyang, North China
					province_id = 5489	#Xianyang, North China
					province_id = 5478	#Jiezhou, North China
					province_id = 2467	#Zezhou, North China
					province_id = 5471	#Shanzou, North China
				}
			}
			subtract_key = { lhs = Building_ExtractionMax value = 40 }
		}
		else = {
			subtract_key = { lhs = Building_ExtractionMax value = 30 }
		}
		if = {
			limit = {
				NOT = { check_key = { lhs = Building_ExtractionMax value = 0 } }
			}
			set_key = { lhs = Building_ExtractionMax value = 0 }
		}
	}
	multiply_key = { lhs = Building_ExtractionMax value = 10 }
	multiply_key = { lhs = Building_ExtractionMax which = Modi_ExtractionMax }
	
	set_key = { lhs = Building_FisheryMax which = Land_Fish }
	multiply_key = { lhs = Building_FisheryMax value = 10 }
	multiply_key = { lhs = Building_FisheryMax which = Modi_FisheryMax }
}

Infra_AddPrp = {
	hidden_effect = {
		if = {
			limit = {
				NOT = { check_key = { lhs = Building_$Type$ value = $Amount$ } }
			}
			set_key = { lhs = Building_$Type$ value = $Amount$ }
		}
		[[Cap]
		if = {
			limit = {
				always = $Cap$
				check_key = { lhs = Building_$Type$ which = Building_$Type$Max }
			}
			set_key = { lhs = Building_$Type$ which = Building_$Type$Max }
		}
		]
	}
}
### Inputs
# id = 8 = Pathing, 9 = Harbourage, 10 = Amenities
# height = Amount of Slots
# width
Infra_StartProject = {
    set_key = { lhs = Public_Tmp1 value = 10 }
    set_key = { lhs = Public_Tmp2 which = $height$ }
    set_key = { lhs = Public_Tmp3 value = 0 }
    
    if = { limit = { has_province_flag = Infra_S0 } subtract_key = { lhs = Public_Tmp1 value = 1 } }
    if = { limit = { has_province_flag = Infra_S1 } subtract_key = { lhs = Public_Tmp1 value = 1 } }
    if = { limit = { has_province_flag = Infra_S2 } subtract_key = { lhs = Public_Tmp1 value = 1 } }
    if = { limit = { has_province_flag = Infra_S3 } subtract_key = { lhs = Public_Tmp1 value = 1 } }
    if = { limit = { has_province_flag = Infra_S4 } subtract_key = { lhs = Public_Tmp1 value = 1 } }
    if = { limit = { has_province_flag = Infra_S5 } subtract_key = { lhs = Public_Tmp1 value = 1 } }
    if = { limit = { has_province_flag = Infra_S6 } subtract_key = { lhs = Public_Tmp1 value = 1 } }
    if = { limit = { has_province_flag = Infra_S7 } subtract_key = { lhs = Public_Tmp1 value = 1 } }
    if = { limit = { has_province_flag = Infra_S8 } subtract_key = { lhs = Public_Tmp1 value = 1 } }
    if = { limit = { has_province_flag = Infra_S9 } subtract_key = { lhs = Public_Tmp1 value = 1 } }
    
    if = {
        limit = {
            check_key = { lhs = Public_Tmp1 value = 1 }
        }
        if = {
            limit = {
                check_key = { lhs = Public_Tmp1 which = $width$ }
            }
            set_key = { lhs = Public_Tmp1 which = $width$ }
        }
    
        set_key = { lhs = Public_Tmp3 which = Public_Tmp2 }
    
        divide_key = { lhs = Public_Tmp2 which = Public_Tmp1 }
		multiply_key = { lhs = Public_Tmp2 value = 0.001 }
        multiply_key = { lhs = Public_Tmp2 value = 1000 }
    
        set_key = { lhs = Public_Tmp4 which = Public_Tmp2 }
        multiply_key = { lhs = Public_Tmp4 which = Public_Tmp1 }
        subtract_key = { lhs = Public_Tmp3 which = Public_Tmp4 }
    
        set_key = { lhs = Public_Tmp4 value = 0 }
            
        while = {
            limit = {
                check_key = { lhs = Public_Tmp1 value = 1 }
            }
            subtract_key = { lhs = Public_Tmp1 value = 1 }
    
            if = {
                limit = {
                    check_key = { lhs = Public_Tmp3 value = 1 }
                }
                change_key = { lhs = Public_Tmp2 value = 1 }
            }
            
			if = {
				limit = {
					check_key = { lhs = Public_Tmp2 value = 1 }
				}
				if = {
					limit = {
						NOT = { has_province_flag = Infra_S0 }
					}
					Infra_StartProjectHelper = { slot = 0 id = $id$ size = Public_Tmp2 width = $width$ [[owner] owner = $owner$ ] }
				}
				else_if = {
					limit = {
						NOT = { has_province_flag = Infra_S1 }
					}
					Infra_StartProjectHelper = { slot = 1 id = $id$ size = Public_Tmp2 width = $width$ [[owner] owner = $owner$ ] }
				}
				else_if = {
					limit = {
						NOT = { has_province_flag = Infra_S2 }
					}
					Infra_StartProjectHelper = { slot = 2 id = $id$ size = Public_Tmp2 width = $width$ [[owner] owner = $owner$ ] }
				}
				else_if = {
					limit = {
						NOT = { has_province_flag = Infra_S3 }
					}
					Infra_StartProjectHelper = { slot = 3 id = $id$ size = Public_Tmp2 width = $width$ [[owner] owner = $owner$ ] }
				}
				else_if = {
					limit = {
						NOT = { has_province_flag = Infra_S4 }
					}
					Infra_StartProjectHelper = { slot = 4 id = $id$ size = Public_Tmp2 width = $width$ [[owner] owner = $owner$ ] }
				}
				else_if = {
					limit = {
						NOT = { has_province_flag = Infra_S5 }
					}
					Infra_StartProjectHelper = { slot = 5 id = $id$ size = Public_Tmp2 width = $width$ [[owner] owner = $owner$ ] }
				}
				else_if = {
					limit = {
						NOT = { has_province_flag = Infra_S6 }
					}
					Infra_StartProjectHelper = { slot = 6 id = $id$ size = Public_Tmp2 width = $width$ [[owner] owner = $owner$ ] }
				}
				else_if = {
					limit = {
						NOT = { has_province_flag = Infra_S7 }
					}
					Infra_StartProjectHelper = { slot = 7 id = $id$ size = Public_Tmp2 width = $width$ [[owner] owner = $owner$ ] }
				}
				else_if = {
					limit = {
						NOT = { has_province_flag = Infra_S8 }
					}
					Infra_StartProjectHelper = { slot = 8 id = $id$ size = Public_Tmp2 width = $width$ [[owner] owner = $owner$ ] }
				}
				else_if = {
					limit = {
						NOT = { has_province_flag = Infra_S9 }
					}
					Infra_StartProjectHelper = { slot = 9 id = $id$ size = Public_Tmp2 width = $width$ [[owner] owner = $owner$ ] }
				}
			}
    
            if = {
                limit = {
                    check_key = { lhs = Public_Tmp3 value = 1 }
                }
                subtract_key = { lhs = Public_Tmp3 value = 1 }
                subtract_key = { lhs = Public_Tmp2 value = 1 }
            }
        }
    
        Infra_RefreshModifier = yes
    }
    
    set_key = { lhs = Public_Tmp1 value = 0 }
    set_key = { lhs = Public_Tmp2 value = 0 }
    set_key = { lhs = Public_Tmp3 value = 0 }
    set_key = { lhs = Public_Tmp4 value = 0 }
}

Infra_CheckProject = {
    if = {
        limit = {
			has_province_flag = Infra_S$slot$
        }
        Infra_CheckProjectHelper = { slot = $slot$ prod = 6 }
        Infra_CheckProjectHelper = { slot = $slot$ prod = 22 }
        Infra_CheckProjectHelper = { slot = $slot$ prod = 23 }
        Infra_CheckProjectHelper = { slot = $slot$ prod = 24 }
        Infra_CheckProjectHelper = { slot = $slot$ prod = 41 }
        Infra_CheckProjectHelper = { slot = $slot$ labor = R }
        Infra_CheckProjectHelper = { slot = $slot$ labor = UL }

        if = {
            limit = {
                is_key_equal = { lhs = Infra_S$slot$6 value = 0 }
                is_key_equal = { lhs = Infra_S$slot$22 value = 0 }
                is_key_equal = { lhs = Infra_S$slot$23 value = 0 }
                is_key_equal = { lhs = Infra_S$slot$24 value = 0 }
                is_key_equal = { lhs = Infra_S$slot$41 value = 0 }
                is_key_equal = { lhs = Infra_S$slot$R value = 0 }
                is_key_equal = { lhs = Infra_S$slot$UL value = 0 }
            }
            Infra_RunScript = { id = Infra_S$slot$ script = Infra_AddBuilding }
            Infra_RunScript = { id = Infra_S$slot$ script = Infra_InConstSubt }

            if = {
                limit = {
                    check_key = { lhs = Infra_S$slot$Size value = 1 }
                }
                subtract_key = { lhs = Infra_S$slot$Size value = 1 }

                Infra_RunScript = { id = Infra_S$slot$ script = Infra_GetCostBuild }

                set_key = { lhs = Infra_S$slot$6 which = Infra_Cost6 }
                set_key = { lhs = Infra_S$slot$22 which = Infra_Cost22 }
                set_key = { lhs = Infra_S$slot$23 which = Infra_Cost23 }
                set_key = { lhs = Infra_S$slot$24 which = Infra_Cost24 }
                set_key = { lhs = Infra_S$slot$41 which = Infra_Cost41 }
                set_key = { lhs = Infra_S$slot$R which = Infra_CostR }
                set_key = { lhs = Infra_S$slot$UL which = Infra_CostUL }

                set_key = { lhs = Infra_Cost6 value = 0 }
                set_key = { lhs = Infra_Cost22 value = 0 }
                set_key = { lhs = Infra_Cost23 value = 0 }
                set_key = { lhs = Infra_Cost24 value = 0 }
                set_key = { lhs = Infra_Cost41 value = 0 }
                set_key = { lhs = Infra_CostR value = 0 }
                set_key = { lhs = Infra_CostUL value = 0 }
            }
            else = {
				clr_province_flag = Infra_S$slot$
                set_key = { lhs = Infra_S$slot$ value = 0 }
                set_key = { lhs = Infra_S$slot$Size value = 0 }
                set_key = { lhs = Infra_S$slot$Owner value = 0 }
                set_key = { lhs = Infra_S$slot$Spend value = 0 }
                set_key = { lhs = Infra_S$slot$Parallel value = 0 }
            }
        }
    }
}

Infra_SpendProject = {
    set_key = { lhs = Infra_S$slot$Spend value = 0 }

    if = {
        limit = {
			has_province_flag = Infra_S$slot$
        }
        Infra_SpendProjectHelper = { slot = $slot$ prod = 6 }
        Infra_SpendProjectHelper = { slot = $slot$ prod = 22 }
        Infra_SpendProjectHelper = { slot = $slot$ prod = 23 }
        Infra_SpendProjectHelper = { slot = $slot$ prod = 24 }
        Infra_SpendProjectHelper = { slot = $slot$ prod = 41 }
        Infra_SpendProjectHelper = { slot = $slot$ labor = R }
        Infra_SpendProjectHelper = { slot = $slot$ labor = UL }

        if = {
            limit = {
                check_key = { lhs = Infra_S$slot$Owner value = 1 }
            }
            if = {
                limit = {
                    check_key = { lhs = Infra_S$slot$Owner value = 4 }
                }
                if = {
                    limit = {
                        check_key = { lhs = Infra_S$slot$Owner value = 5 }
                    }
                    if = {
                        limit = {
                            check_key = { lhs = Infra_S$slot$Owner value = 6 }
                        }
                        if = {
                            limit = {
                                check_key = { lhs = Infra_S$slot$Owner value = 7 }
                            }
                            change_key = { lhs = Building_ProjectSpend which = Infra_S$slot$Spend }
                        }
                        else = {
							change_key = { lhs = CL_SpendPrp which = Infra_S$slot$Spend }
                        }
                    }
                    else = {
						change_key = { lhs = BG_SpendPrp which = Infra_S$slot$Spend }
                    }
                }
                else = {
					change_key = { lhs = NO_SpendPrp which = Infra_S$slot$Spend }
                }
            }
            else = {
                if = {
                    limit = {
                        check_key = { lhs = Infra_S$slot$Owner value = 2 }
                    }
                    if = {
                        limit = {
                            check_key = { lhs = Infra_S$slot$Owner value = 3 }
                        }
						change_key = { lhs = RE_SpendPrp which = Infra_S$slot$Spend }
                    }
                    else = {
						change_key = { lhs = NM_SpendPrp which = Infra_S$slot$Spend }
                    }
                }
                else = {
					change_key = { lhs = SF_SpendPrp which = Infra_S$slot$Spend }
                }
            }
        }
        else = {
            change_key = { lhs = Infra_Spend which = Infra_S$slot$Spend }
        }
    }
}

Infra_InConstAdd = {
    [[building]
        change_key = { lhs = Infra_InConst$building$ which = $size$ }
    ]
    [[infra]
        change_key = { lhs = Infra_InConst$infra$ which = $size$ }
    ]
}
Infra_InConstSubt = {
    [[building]
        subtract_key = { lhs = Infra_InConst$building$ value = 1 }
    ]
    [[infra]
        subtract_key = { lhs = Infra_InConst$infra$ value = 1 }
    ]
}

Infra_StartProjectHelper = {
    set_province_flag = Infra_S$slot$
    set_key = { lhs = Infra_S$slot$ value = $id$ }
    set_key = { lhs = Infra_S$slot$Size which = $size$ }
    set_key = { lhs = Infra_S$slot$Parallel which = $width$ }
    subtract_key = { lhs = Infra_S$slot$Size value = 1 }
    [[owner] set_key = { lhs = Infra_S$slot$Owner value = $owner$ } ]

    Infra_RunScript = { id = Infra_S$slot$ script = Infra_GetCostBuild }
    Infra_RunScript = { id = Infra_S$slot$ script = Infra_InConstAdd paramInfra = size inpInfra = $size$ }

    set_key = { lhs = Infra_S$slot$6 which = Infra_Cost6 }
    set_key = { lhs = Infra_S$slot$22 which = Infra_Cost22 }
    set_key = { lhs = Infra_S$slot$23 which = Infra_Cost23 }
    set_key = { lhs = Infra_S$slot$24 which = Infra_Cost24 }
    set_key = { lhs = Infra_S$slot$41 which = Infra_Cost41 }
    set_key = { lhs = Infra_S$slot$R which = Infra_CostR }
    set_key = { lhs = Infra_S$slot$UL which = Infra_CostUL }

    set_key = { lhs = Infra_Cost6 value = 0 }
    set_key = { lhs = Infra_Cost22 value = 0 }
    set_key = { lhs = Infra_Cost23 value = 0 }
    set_key = { lhs = Infra_Cost24 value = 0 }
    set_key = { lhs = Infra_Cost41 value = 0 }
    set_key = { lhs = Infra_CostR value = 0 }
    set_key = { lhs = Infra_CostUL value = 0 }
}   

Infra_CheckProjectHelper = {
    [[prod]
		if = {
			limit = {
				check_key = { lhs = Infra_S$slot$$prod$ value = 0.1 }
			}
			set_key = { lhs = Public_Tmp1 value = 100 }
			subtract_key = { lhs = Public_Tmp1 which = TN_ProvFill$prod$ }
			multiply_key = { lhs = Public_Tmp1 value = 0.01 }
			multiply_key = { lhs = Infra_S$slot$$prod$ which = Public_Tmp1 }
		}
		else = {
			set_key = { lhs = Infra_S$slot$$prod$ value = 0 }
		}
    ]
    [[labor]
		if = {
			limit = {
				check_key = { lhs = Infra_S$slot$$labor$ value = 0.1 }
			}
			set_key = { lhs = Public_Tmp1 value = 100 }
			subtract_key = { lhs = Public_Tmp1 which = Prod_Fill$labor$ }
			multiply_key = { lhs = Public_Tmp1 value = 0.01 }
			multiply_key = { lhs = Infra_S$slot$$labor$ which = Public_Tmp1 }
		}
		else = {
			set_key = { lhs = Infra_S$slot$$labor$ value = 0 }
		}
    ]
}

Infra_SpendProjectHelper = {
    [[prod]
        if = {
            limit = {
                check_key = { lhs = Infra_S$slot$$prod$ value = 0.001 }
            }
            set_key = { lhs = Public_Tmp1 which = Infra_S$slot$$prod$ }
            multiply_key = { lhs = Public_Tmp1 which = TN_SectorSpend$prod$ }
            change_key = { lhs = Infra_S$slot$Spend which = Public_Tmp1 }
        }
    ]
    [[labor]
        if = {
            limit = {
                check_key = { lhs = Infra_S$slot$$labor$ value = 0.001 }
            }
            set_key = { lhs = Public_Tmp1 which = Infra_S$slot$$labor$ }
            multiply_key = { lhs = Public_Tmp1 which = Prod_Fill$labor$ }
			multiply_key = { lhs = Public_Tmp1 value = 0.01 }
            multiply_key = { lhs = Public_Tmp1 which = Class_P$labor$ }
            change_key = { lhs = Infra_S$slot$Spend which = Public_Tmp1 }
        }
    ]
}

Infra_SetMaintCommercial = {
	set_key = { lhs = Building_$type$1 value = 0 } # food 
	set_key = { lhs = Building_$type$6 value = 0 } # raw material
	set_key = { lhs = Building_$type$24 value = 0 } # industrial products
	
	if = {
		limit = {
			check_key = { lhs = Building_$type$IncomeAverage value = 0.001 }
		}
		set_key = { lhs = Tmp_0 which = Building_$type$IncomeAverage }
		multiply_key = { lhs = Tmp_0 value = 0.025 }
		
		set_key = { lhs = Tmp_1 value = 0 }
		
		set_key = { lhs = Tmp_2 which = TN_ProvPrc1 } # food price
		multiply_key = { lhs = Tmp_2 value = $food$ } # fixed value
		change_key = { lhs = Tmp_1 which = Tmp_2 }
		
		set_key = { lhs = Tmp_2 which = TN_ProvPrc6 } # raw material price
		multiply_key = { lhs = Tmp_2 value = $raw$ }  # fixed value
		change_key = { lhs = Tmp_1 which = Tmp_2 }
		
		set_key = { lhs = Tmp_2 which = TN_ProvPrc24 } # industral price
		multiply_key = { lhs = Tmp_2 value = $indust$ } # fixed value
		change_key = { lhs = Tmp_1 which = Tmp_2 }
		
		divide_key = { lhs = Tmp_0 which = Tmp_1 } # calculate the demand level. 2.5% of income average / sum (costs of products).
        
		set_key = { lhs = Tmp_1 which = Tmp_0 }
		multiply_key = { lhs = Tmp_1 value = $food$ }
		change_key = { lhs = Building_$type$1 which = Tmp_1 } # how much food it used
		
		set_key = { lhs = Tmp_1 which = Tmp_0 }
		multiply_key = { lhs = Tmp_1 value = $raw$ } 
		change_key = { lhs = Building_$type$6 which = Tmp_1 } # how much raw material it used
		
		set_key = { lhs = Tmp_1 which = Tmp_0 }
		multiply_key = { lhs = Tmp_1 value = $indust$ }
		change_key = { lhs = Building_$type$24 which = Tmp_1 } # how much industrial product it used
	}
	
	if = {
		limit = {
			check_key = { lhs = Building_$type$Wealth value = 0.01 } # state investment. follows same process
		}
		set_key = { lhs = Tmp_0 value = 0 }
		
		set_key = { lhs = Tmp_1 which = TN_ProvPrc1 }
		multiply_key = { lhs = Tmp_1 value = $food$ }
		change_key = { lhs = Tmp_0 which = Tmp_1 }
		
		set_key = { lhs = Tmp_1 which = TN_ProvPrc6 }
		multiply_key = { lhs = Tmp_1 value = $raw$ }
		change_key = { lhs = Tmp_0 which = Tmp_1 }
		
		set_key = { lhs = Tmp_1 which = TN_ProvPrc24 }
		multiply_key = { lhs = Tmp_1 value = $indust$ }
		change_key = { lhs = Tmp_0 which = Tmp_1 }
		
		set_key = { lhs = Tmp_1 which = Building_$type$Wealth }
		divide_key = { lhs = Tmp_1 which = Tmp_0 }
		
		set_key = { lhs = Tmp_2 which = Tmp_1 }
		multiply_key = { lhs = Tmp_2 value = $food$ }
		change_key = { lhs = Building_$type$1 which = Tmp_2 }
		
		set_key = { lhs = Tmp_2 which = Tmp_1 }
		multiply_key = { lhs = Tmp_2 value = $raw$ }
		change_key = { lhs = Building_$type$6 which = Tmp_2 }
		
		set_key = { lhs = Tmp_2 which = Tmp_1 }
		multiply_key = { lhs = Tmp_2 value = $indust$ }
		change_key = { lhs = Building_$type$24 which = Tmp_2 }
	}
}

Infra_SetMaintHelper = {
    if = {
        limit = {
            has_province_flag = Prod_S$slot$
            has_province_flag = Prod_S$slot$DmndB$type$
        }
		set_key = { lhs = Tmp_0 which = Prod_S$slot$Income }
		subtract_key = { lhs = Tmp_0 which = Prod_S$slot$SpendPrev }
		
		if = {
			limit = {
				NOT = {
					has_global_flag = POP_Sim1
				}
			}
			set_key = { lhs = Tmp_1 which = Tmp_0 } 
			subtract_key = { lhs = Tmp_1 which = Prod_S$slot$RecProfit }
            
           set_key = { lhs = Tmp_2 which = Prod_S$slot$RecSizePrev }
			subtract_key = { lhs = Tmp_2 which = Prod_S$slot$RecSizePrevPrev }
            
            # Tmp_0 = Current Profit
            # Tmp_1 = Current Profit - Previous Profit * throughtput scaled by 1
            # Tmp_2 = Size of previous year - Size of previous previous year). This is a measure of previous year changes.
            
            if = {
				limit = {
					check_key = { lhs = Tmp_2 value = 0 }
				}
				change_key = { lhs = Tmp_2 value = 0.01 }
			}
            else = {
				change_key = { lhs = Tmp_2 value = -0.01 }
			}
			
			divide_key = { lhs = Tmp_1 which = Tmp_2 } # (Current Profit - Previous Profit) / (Size change). 
                                                       # If either of them are negative, industry won't expand, because it either means profitability is decreasing while size increasing, meaning you want
                                                       # to shrink more to acquire more profitability, or profitability is increasing while size decreasing, meaning you shrinking looks like a good idea.
			
			if = {
				limit = {
					check_key = { lhs = Tmp_1 value = 0 } # If the division was positive
				}
				set_key = { lhs = Tmp_2 which = Tmp_1 }
				change_key = { lhs = Tmp_2 value = 1 }
				
				multiply_key = { lhs = Tmp_1 value = 3 }
				divide_key = { lhs = Tmp_1 which = Tmp_2 } # Tmp_1 will be positive, maximum value is 3.
			}
			else = {                                       # Else if the division was negative
				set_key = { lhs = Tmp_2 which = Tmp_1 }
				change_key = { lhs = Tmp_2 value = -1 }
				
				multiply_key = { lhs = Tmp_1 value = -3 }
				divide_key = { lhs = Tmp_1 which = Tmp_2 } # Tmp_1 will come negative, minimum value is -3
			}
			
            if = {
                limit = {
                    always = $slot0$
                }
                heuristicHelper = { slot = $slot$ }
            }
            else_if = {
                limit = {
                    always = $slot1$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot2$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot3$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot4$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot5$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot6$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot7$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot8$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot9$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot10$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot11$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot12$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot13$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot14$
                }
                heuristicHelper = { slot = $slot$ } 
            }
            else_if = {
                limit = {
                    always = $slot15$
                }
                heuristicHelper = { slot = $slot$ } 
            }        


			
			if = { # If tmp_1 is positive, building will want to expand.
				limit = {
					check_key = { lhs = Tmp_1 value = 0 }
				}
				change_key = { lhs = Tmp_1 value = 0.5 }
				
				set_key = { lhs = Prod_S$slot$Change which = Tmp_1 }
				multiply_key = { lhs = Prod_S$slot$Change which = Prod_S$slot$Size }
				multiply_key = { lhs = Prod_S$slot$Change value = 0.01 }
				
				change_key = { lhs = Building_$type$Up which = Prod_S$slot$Change }  #
                
                # Building_$type$Up represents an absolute amount of units that want to be expanded in the industry. This value is maximum 3.5% of it's total size.
                # according to all the desirable changes of the industries (either expansion or shrinking) belonging to that same Property.
                # Example: If farmlands has 4 industries and 2 of them want to grow, Farmlands will have 2 industries that provide a Building_$type$Up 
                # and 2 of them that provide a Building_$type$Down value. 
                # On the other hand, Prod_S$slot$Change reflects the specific change desire of absolute units of an specific industry. 
			}
			else = { # if Tmp_1 is negative, will want to shrink.
				change_key = { lhs = Tmp_1 value = -0.5 }
				
				set_key = { lhs = Prod_S$slot$Change which = Tmp_1 }
				multiply_key = { lhs = Prod_S$slot$Change which = Prod_S$slot$Size }
				
				multiply_key = { lhs = Tmp_1 value = -1 }
				change_key = { lhs = Tmp_1 value = 100 }
				divide_key = { lhs = Prod_S$slot$Change which = Tmp_1 }
				
				subtract_key = { lhs = Building_$type$Down which = Prod_S$slot$Change } # Building_$type$Down represents an abstract value for shrinkage desire.
			}
		}
		
		set_key = { lhs = Prod_S$slot$RecProfit which = Tmp_0 }
		
		set_key = { lhs = Prod_S$slot$RecSizePrevPrev which = Prod_S$slot$RecSizePrev }
		set_key = { lhs = Prod_S$slot$RecSizePrev which = Prod_S$slot$RecSize }
		set_key = { lhs = Prod_S$slot$RecSize which = Prod_S$slot$Size }
    }
}

heuristicHelper = {
    random_list = { # Random factor
        1 = {
            modifier = {
                factor = 3.5
                OR = {
                    is_key_equal = { lhs = Prod_S$slot$ value = 11 }
                    is_key_equal = { lhs = Prod_S$slot$ value = 13 }
                    is_key_equal = { lhs = Prod_S$slot$ value = 42 }
                }
                
            }
            multiply_key = { lhs = Tmp_1 value = -0.66 }
        }
        9 = {
           
        }
    }
}

Infra_SetMaint = {
    set_key = { lhs = Building_$type$Up value = 0 }   # property expansion desire
    set_key = { lhs = Building_$type$Down value = 0 } # property shrink desire
	set_key = { lhs = Building_$type$1 value = 0 } # food maintenance
	set_key = { lhs = Building_$type$6 value = 0 } # raw
	set_key = { lhs = Building_$type$24 value = 0 } # industrial
	
	if = {
		limit = {
			check_key = { lhs = Building_$type$ value = 0.01 }
		}
        Infra_SetMaintHelper = { type = $type$ slot = 0 slot0=yes slot1=no slot2=no slot3=no slot4=no slot5=no slot6=no slot7=no slot8=no slot9=no slot10=no slot11=no slot12=no slot13=no slot14=no slot15=no } # calculate profitability of every slot. Industry heuristic logic.
        Infra_SetMaintHelper = { type = $type$ slot = 1 slot0=no slot1=yes slot2=no slot3=no slot4=no slot5=no slot6=no slot7=no slot8=no slot9=no slot10=no slot11=no slot12=no slot13=no slot14=no slot15=no }  
        Infra_SetMaintHelper = { type = $type$ slot = 2 slot0=no slot1=no slot2=yes slot3=no slot4=no slot5=no slot6=no slot7=no slot8=no slot9=no slot10=no slot11=no slot12=no slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 3 slot0=no slot1=no slot2=no slot3=yes slot4=no slot5=no slot6=no slot7=no slot8=no slot9=no slot10=no slot11=no slot12=no slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 4 slot0=no slot1=no slot2=no slot3=no slot4=yes slot5=no slot6=no slot7=no slot8=no slot9=no slot10=no slot11=no slot12=no slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 5 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=yes slot6=no slot7=no slot8=no slot9=no slot10=no slot11=no slot12=no slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 6 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=no slot6=yes slot7=no slot8=no slot9=no slot10=no slot11=no slot12=no slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 7 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=no slot6=no slot7=yes slot8=no slot9=no slot10=no slot11=no slot12=no slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 8 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=no slot6=no slot7=no slot8=yes slot9=no slot10=no slot11=no slot12=no slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 9 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=no slot6=no slot7=no slot8=no slot9=yes slot10=no slot11=no slot12=no slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 10 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=no slot6=no slot7=no slot8=no slot9=no slot10=yes slot11=no slot12=no slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 11 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=no slot6=no slot7=no slot8=no slot9=no slot10=no slot11=yes slot12=no slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 12 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=no slot6=no slot7=no slot8=no slot9=no slot10=no slot11=no slot12=yes slot13=no slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 13 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=no slot6=no slot7=no slot8=no slot9=no slot10=no slot11=no slot12=no slot13=yes slot14=no slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 14 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=no slot6=no slot7=no slot8=no slot9=no slot10=no slot11=no slot12=no slot13=no slot14=yes slot15=no }
        Infra_SetMaintHelper = { type = $type$ slot = 15 slot0=no slot1=no slot2=no slot3=no slot4=no slot5=no slot6=no slot7=no slot8=no slot9=no slot10=no slot11=no slot12=no slot13=no slot14=no slot15=yes }

        set_key = { lhs = Tmp_0 which = Building_$type$ }
        multiply_key = { lhs = Tmp_0 value = $rate$ }

        set_key = { lhs = Tmp_1 which = Building_$type$Up }
        subtract_key = { lhs = Tmp_1 which = Building_$type$Down }
        divide_key = { lhs = Tmp_1 value = $factor$ }
        change_key = { lhs = Tmp_0 which = Tmp_1 } # expansion or shrinkage

        if = {
            limit = {
                check_key = { lhs = Tmp_0 value = 0 } # if property wants to expand, add the maintenance of the expansion. Because there is a new size change, the property will now demand more.
            }
            multiply_key = { lhs = Tmp_0 which = Modi_$type$Cost }
            multiply_key = { lhs = Tmp_0 which = Modi_BuildingCost }
            multiply_key = { lhs = Tmp_0 which = Modi_BuildingTime }
            			
			set_key = { lhs = Building_$type$1 which = Tmp_0 }
            set_key = { lhs = Building_$type$6 which = Tmp_0 }
            set_key = { lhs = Building_$type$24 which = Tmp_0 }
			
			multiply_key = { lhs = Building_$type$1 value = $food$ }
            multiply_key = { lhs = Building_$type$6 value = $raw$ }
            multiply_key = { lhs = Building_$type$24 value = $indust$ }
        }
	}
	
	if = {
		limit = { # add maintenance costs based on state expansion. (see *a)) if state invested. Always applies since state forced the expansion.
			check_key = { lhs = Building_$type$Wealth value = 0.01 }
		}
		set_key = { lhs = Tmp_0 value = 0 }
		
		set_key = { lhs = Tmp_1 which = TN_ProvPrc1 }
		multiply_key = { lhs = Tmp_1 value = $food$ }
		change_key = { lhs = Tmp_0 which = Tmp_1 }
		
		set_key = { lhs = Tmp_1 which = TN_ProvPrc6 }
		multiply_key = { lhs = Tmp_1 value = $raw$ }
		change_key = { lhs = Tmp_0 which = Tmp_1 }
		
		set_key = { lhs = Tmp_1 which = TN_ProvPrc24 }
		multiply_key = { lhs = Tmp_1 value = $indust$ }
		change_key = { lhs = Tmp_0 which = Tmp_1 }
		
		set_key = { lhs = Tmp_1 which = Building_$type$Wealth } # *a) state expansion
		divide_key = { lhs = Tmp_1 which = Tmp_0 }
		
		set_key = { lhs = Tmp_2 which = Tmp_1 }
		multiply_key = { lhs = Tmp_2 value = $food$ }
		change_key = { lhs = Building_$type$1 which = Tmp_2 }
		
		set_key = { lhs = Tmp_2 which = Tmp_1 }
		multiply_key = { lhs = Tmp_2 value = $raw$ }
		change_key = { lhs = Building_$type$6 which = Tmp_2 }
		
		set_key = { lhs = Tmp_2 which = Tmp_1 }
		multiply_key = { lhs = Tmp_2 value = $indust$ }
		change_key = { lhs = Building_$type$24 which = Tmp_2 }
	}
}

Infra_RefreshIndustryHelper = {
    if = {
        limit = {
            has_province_flag = Prod_S$slot$
            has_province_flag = Prod_S$slot$DmndB$type$
        }
        change_key = { lhs = Tmp_0 which = Prod_S$slot$Size }

        [[excl]
            if = {
                limit = {
                    owner = { is_nomad = no }
                    is_key_equal = { lhs = Prod_S$slot$ value = $excl$ }
                }
                set_province_flag = exclude_$slot$
                change_key = { lhs = Tmp_1 which = Prod_S$slot$Size }
            }
            else = { clr_province_flag = exclude_$slot$ }
        ]
        
        [[excl_cottage]
            if = {
                limit = {
                    has_province_flag = Building_IndustrialHas
                    is_key_equal = { lhs = Prod_S$slot$ value = $excl_cottage$ }
                    check_key = { lhs = Building_Industrial which = Prod_S$slot$Size }
                }
                set_province_flag = exclude_$slot$
                change_key = { lhs = Tmp_1 which = Prod_S$slot$Size }
            }
            else = { clr_province_flag = exclude_$slot$ }
        ]
        
        [[excl_relig]
            if = {
                limit = {
                    has_province_flag = Has_Uni
                    is_key_equal = { lhs = Prod_S$slot$ value = $excl_relig$ }
                }
                set_province_flag = exclude_$slot$
                change_key = { lhs = Tmp_1 which = Prod_S$slot$Size }
            }
            else = { clr_province_flag = exclude_$slot$ }
        ]
    }
}

Infra_RefreshIndustry = {
    set_key = { lhs = Tmp_0 value = 0 }
    set_key = { lhs = Tmp_1 value = 0 }

    Infra_RefreshIndustryHelper = { slot = 0 type = $type$  [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 1 type = $type$  [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 2 type = $type$  [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 3 type = $type$  [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 4 type = $type$  [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 5 type = $type$  [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 6 type = $type$  [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 7 type = $type$  [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 8 type = $type$  [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 9 type = $type$  [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 10 type = $type$ [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 11 type = $type$ [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 12 type = $type$ [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 13 type = $type$ [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 14 type = $type$ [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
    Infra_RefreshIndustryHelper = { slot = 15 type = $type$ [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }

    if = {
        limit = {
            check_key = { lhs = Tmp_0 value = 0.001 } # Tmp_0 = Size of all industries combined
        }
        if = {
            limit = {
                OR = {
                    has_global_flag = POP_Sim
                    
                    NOT = {
                        check_key = { lhs = Building_$type$ which = Tmp_0 } # If property isn't greater than the size of it's industries combined
                    }

                    is_key_equal = { lhs = Tmp_1 value = 0 }
                    is_key_equal = { lhs = Tmp_0 which = Tmp_1 } 
				}
            }
            set_key = { lhs = Tmp_2 which = Building_$type$ }
            divide_key = { lhs = Tmp_2 which = Tmp_0 }

            if = { limit = { has_province_flag = Prod_S0DmndB$type$ }  multiply_key = { lhs = Prod_S0Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S1DmndB$type$ }  multiply_key = { lhs = Prod_S1Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S2DmndB$type$ }  multiply_key = { lhs = Prod_S2Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S3DmndB$type$ }  multiply_key = { lhs = Prod_S3Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S4DmndB$type$ }  multiply_key = { lhs = Prod_S4Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S5DmndB$type$ }  multiply_key = { lhs = Prod_S5Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S6DmndB$type$ }  multiply_key = { lhs = Prod_S6Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S7DmndB$type$ }  multiply_key = { lhs = Prod_S7Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S8DmndB$type$ }  multiply_key = { lhs = Prod_S8Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S9DmndB$type$ }  multiply_key = { lhs = Prod_S9Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S10DmndB$type$ } multiply_key = { lhs = Prod_S10Size which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S11DmndB$type$ } multiply_key = { lhs = Prod_S11Size which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S12DmndB$type$ } multiply_key = { lhs = Prod_S12Size which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S13DmndB$type$ } multiply_key = { lhs = Prod_S13Size which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S14DmndB$type$ } multiply_key = { lhs = Prod_S14Size which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S15DmndB$type$ } multiply_key = { lhs = Prod_S15Size which = Tmp_2 } }
        }
        else = {
            set_key = { lhs = Tmp_2 which = Building_$type$ }
            subtract_key = { lhs = Tmp_2 which = Tmp_1 }
            subtract_key = { lhs = Tmp_0 which = Tmp_1 }
            divide_key = { lhs = Tmp_2 which = Tmp_0 }

            if = { limit = { has_province_flag = Prod_S0DmndB$type$  NOT = { has_province_flag = exclude_0 } }  multiply_key = { lhs = Prod_S0Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S1DmndB$type$  NOT = { has_province_flag = exclude_1 } }  multiply_key = { lhs = Prod_S1Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S2DmndB$type$  NOT = { has_province_flag = exclude_2 } }  multiply_key = { lhs = Prod_S2Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S3DmndB$type$  NOT = { has_province_flag = exclude_3 } }  multiply_key = { lhs = Prod_S3Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S4DmndB$type$  NOT = { has_province_flag = exclude_4 } }  multiply_key = { lhs = Prod_S4Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S5DmndB$type$  NOT = { has_province_flag = exclude_5 } }  multiply_key = { lhs = Prod_S5Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S6DmndB$type$  NOT = { has_province_flag = exclude_6 } }  multiply_key = { lhs = Prod_S6Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S7DmndB$type$  NOT = { has_province_flag = exclude_7 } }  multiply_key = { lhs = Prod_S7Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S8DmndB$type$  NOT = { has_province_flag = exclude_8 } }  multiply_key = { lhs = Prod_S8Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S9DmndB$type$  NOT = { has_province_flag = exclude_9 } }  multiply_key = { lhs = Prod_S9Size  which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S10DmndB$type$ NOT = { has_province_flag = exclude_10 } } multiply_key = { lhs = Prod_S10Size which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S11DmndB$type$ NOT = { has_province_flag = exclude_11 } } multiply_key = { lhs = Prod_S11Size which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S12DmndB$type$ NOT = { has_province_flag = exclude_12 } } multiply_key = { lhs = Prod_S12Size which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S13DmndB$type$ NOT = { has_province_flag = exclude_13 } } multiply_key = { lhs = Prod_S13Size which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S14DmndB$type$ NOT = { has_province_flag = exclude_14 } } multiply_key = { lhs = Prod_S14Size which = Tmp_2 } }
            if = { limit = { has_province_flag = Prod_S15DmndB$type$ NOT = { has_province_flag = exclude_15 } } multiply_key = { lhs = Prod_S15Size which = Tmp_2 } }
        }
    }
}

Infra_DoSizeHelper0 = { # calculate products maintenance fullfilments
	if = {
		limit = {
			check_key = { lhs = Building_$type$$prod$ value = 0.001 }
		}
		set_key = { lhs = Tmp_0 which = TN_ProvFill$prod$ }
		change_key = { lhs = Tmp_0 value = $base$ }
		multiply_key = { lhs = Tmp_0 which = Building_$type$$prod$ }
		divide_key = { lhs = Tmp_0 value = $div$ }
		change_key = { lhs = Building_$type$Gain which = Tmp_0 } # Building_$type$Gain basically is how much the property could fullfil it's needs.
	}
}
Infra_DoSizeHelper1 = { # expansion or shrinkage
    if = {
        limit = {
            has_province_flag = Prod_S$slot$
            has_province_flag = Prod_S$slot$DmndB$type$
        }
        change_key = { lhs = Prod_S$slot$Size which = Prod_S$slot$Change }      
    }
}

Infra_DoSize = { # calculate building size change
	set_key = { lhs = Building_$type$Gain value = 0 }
	set_key = { lhs = Building_$type$Decay value = 0 }
    if = {
        limit = {
            OR = {
                has_global_flag = POP_Sim10
                check_key = { lhs = Building_$type$ value = 0.001 }
            }
        }
	
        if = {
            limit = {
                has_global_flag = POP_Sim
            }
            Infra_DoSizeHelper0 = { type = $type$ prod = 1 base = 100 div = 200 }
            Infra_DoSizeHelper0 = { type = $type$ prod = 6 base = 100 div = 200 }
            Infra_DoSizeHelper0 = { type = $type$ prod = 24 base = 100 div = 200 }
        }
        else = {
            Infra_DoSizeHelper0 = { type = $type$ prod = 1 base = 50 div = 150 }
            Infra_DoSizeHelper0 = { type = $type$ prod = 6 base = 50 div = 150 }
            Infra_DoSizeHelper0 = { type = $type$ prod = 24 base = 50 div = 150 }
        }
        
        set_key = { lhs = Tmp_0 which = Building_$type$ }
        multiply_key = { lhs = Tmp_0 value = -1 } # 1) Store building size as a negative.
        
        multiply_key = { lhs = Building_$type$Gain value = $factor$ }
                
        if = { # annual fixed decay of 2%
            limit = {
                check_key = { lhs = Building_$type$ value = 0.001 }
            }
            set_key = { lhs = Building_$type$Decay which = Building_$type$ }
            multiply_key = { lhs = Building_$type$Decay value = 0.02 }
        }
       
        
        # Modi modifiers to Gain.
        if = { limit = { check_key = { lhs = Modi_$type$Cost value = 0.001 } } divide_key = { lhs = Building_$type$Gain which = Modi_$type$Cost } }
        if = { limit = { check_key = { lhs = Modi_BuildingCost value = 0.001 } } divide_key = { lhs = Building_$type$Gain which = Modi_BuildingCost } }
        if = { limit = { check_key = { lhs = Modi_BuildingTime value = 0.001 } } divide_key = { lhs = Building_$type$Gain which = Modi_BuildingTime } }
        
         
             
        change_key = { lhs = Building_$type$ which = Building_$type$Gain }
        subtract_key = { lhs = Building_$type$ which = Building_$type$Decay }
        change_key = { lhs = Building_$type$ which = Building_$type$Up }
        subtract_key = { lhs = Building_$type$ which = Building_$type$Down }
            
       
        [[cap]
            if = {
                limit = {
                    check_key = { lhs = Building_$type$ which = $cap$ }
                }
                set_key = { lhs = Building_$type$ which = $cap$ }
            }
            Infra_UpdatePerc = { type = $type$ }
        ]

        
        Infra_DoSizeHelper1 = { slot = 0 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 1 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 2 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 3 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 4 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 5 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 6 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 7 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 8 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 9 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 10 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 11 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 12 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 13 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 14 type = $type$ }
        Infra_DoSizeHelper1 = { slot = 15 type = $type$ }
        
    }
    Infra_RefreshIndustry = { type = $type$ [[excl] excl = $excl$ ] [[excl_cottage] excl_cottage = $excl_cottage$ ] [[excl_relig] excl_relig = $excl_relig$ ] }
}

Infra_UpdatePerc = {
	if = {
		limit = {
			check_key = { lhs = Building_$type$ value = 0.001 }
		}
		set_key = { lhs = Building_$type$Fill which = Building_$type$ }
		divide_key = { lhs = Building_$type$Fill which = Building_$type$Max }
	}
	else = {
		set_key = { lhs = Building_$type$Fill value = 0 }
	}
}

Infra_SumSpend = { # how much it spent on the products for maintenance
	set_key = { lhs = Building_$type$Spend value = 0 }
	
	set_key = { lhs = Tmp_0 which = Building_$type$1 }
    multiply_key = { lhs = Tmp_0 which = TN_SectorSpend1 }
    change_key = { lhs = Building_$type$Spend which = Tmp_0 }
	
    set_key = { lhs = Tmp_0 which = Building_$type$6 }
    multiply_key = { lhs = Tmp_0 which = TN_SectorSpend6 }
    change_key = { lhs = Building_$type$Spend which = Tmp_0 }
	
	set_key = { lhs = Tmp_0 which = Building_$type$24 }
    multiply_key = { lhs = Tmp_0 which = TN_SectorSpend24 }
    change_key = { lhs = Building_$type$Spend which = Tmp_0 }
}

Infra_DoSpendHelper = { # calc how much each estate has to spend on maintining. $rate$ differentitates how much money is the state putting into specific types of properties
	if = {
		limit = {
			check_key = { lhs = $class$_Total value = 0.001 }
			check_key = { lhs = $class$_Wealth value = 1.01 }
		}
		set_key = { lhs = Tmp_7 which = $class$_Prp$type$ }
		multiply_key = { lhs = Tmp_7 value = 0.01 }
		if = {
			limit = {
				NOT = { check_key = { lhs = Tmp_7 value = $share$ } }
			}
			set_key = { lhs = Tmp_7 value = $share$ }
		}
		
		multiply_key = { lhs = Tmp_7 which = Building_$type$Spend }
		
		# boosts the share of the class based on tribal power
		[[Tribal]
		if = {
			limit = {
				always = $Tribal$
			}
			set_key = { lhs = Tmp_8 which = Prov_TRPow }
			multiply_key = { lhs = Tmp_8 value = 0.005 }
			change_key = { lhs = Tmp_8 value = 1 }
			multiply_key = { lhs = Tmp_7 which = Tmp_8 }
			set_key = { lhs = Tmp_8 value = 0 }
		}
		]
		[[InvTribal]
		if = {
			limit = {
				always = $InvTribal$
			}
			set_key = { lhs = Tmp_8 value = 100 }
			subtract_key = { lhs = Tmp_8 which = Prov_TRPow }
			multiply_key = { lhs = Tmp_8 value = 0.005 }
			change_key = { lhs = Tmp_8 value = 0.5 }
			multiply_key = { lhs = Tmp_7 which = Tmp_8 }
			set_key = { lhs = Tmp_8 value = 0 }
		}
		]
		
		# makes the share dependent on nomadism
		[[Nomad]
		if = {
			limit = {
				always = $Nomad$
			}
			set_key = { lhs = Tmp_8 which = NM_Ratio }
			multiply_key = { lhs = Tmp_8 value = 0.009 }
			change_key = { lhs = Tmp_8 value = 0.1 }
			multiply_key = { lhs = Tmp_7 which = Tmp_8 }
			set_key = { lhs = Tmp_8 value = 0 }
		}
		]
		
		# makes the share dependent on inverse nomadism
		[[InvNomad]
		if = {
			limit = {
				always = $InvNomad$
			}
			set_key = { lhs = Tmp_8 value = 100 }
			subtract_key = { lhs = Tmp_8 which = NM_Ratio }
			multiply_key = { lhs = Tmp_8 value = 0.01 }
			multiply_key = { lhs = Tmp_7 which = Tmp_8 }
			set_key = { lhs = Tmp_8 value = 0 }
		}
		]
		set_key = { lhs = $return$ which = $class$_Wealth }
		multiply_key = { lhs = $return$ value = 0.25 }
		if = {
			limit = {
				check_key = { lhs = $return$ which = Tmp_7 }
			}
			set_key = { lhs = $return$ which = Tmp_7 }
		}
		
		change_key = { lhs = Tmp_0 which = $return$ }
	}
	else = {
		set_key = { lhs = $return$ value = 0 }
	}
}

# TMP_1 = SF
# TMP 2 = RE
# TMP 3 = NM
# TMP 4 = NO
# TMP 5 = BG
# TMP 6 = CL
Infra_ShareOfferAgriculture = {
	if = {
		limit = {
			owner = { Rights_NOGov1Has = yes }
		}
		Infra_DoSpendHelper = { type = Agriculture class = SF return = Tmp_1 share = 0.255 InvNomad=yes Tribal=yes }
		Infra_DoSpendHelper = { type = Agriculture class = NO return = Tmp_4 share = 0.45 }
	}
	else_if = {
		limit = {
			owner = { Rights_NOGov2Has = yes }
		}
		Infra_DoSpendHelper = { type = Agriculture class = SF return = Tmp_1 share = 0.325 InvNomad=yes Tribal=yes }
		Infra_DoSpendHelper = { type = Agriculture class = NO return = Tmp_4 share = 0.4 }
	}
	else_if = {
		limit = {
			owner = { Rights_NOGov3Has = yes }
		}
		Infra_DoSpendHelper = { type = Agriculture class = SF return = Tmp_1 share = 0.375 InvNomad=yes Tribal=yes }
		Infra_DoSpendHelper = { type = Agriculture class = NO return = Tmp_4 share = 0.35 }
	}
	else_if = {
		limit = {
			owner = { Rights_NOGov4Has = yes }
		}
		Infra_DoSpendHelper = { type = Agriculture class = SF return = Tmp_1 share = 0.425 InvNomad=yes Tribal=yes }
		Infra_DoSpendHelper = { type = Agriculture class = NO return = Tmp_4 share = 0.3 }
	}
	else_if = {
		limit = {
			owner = { Rights_NOGov5Has = yes }
		}
		Infra_DoSpendHelper = { type = Agriculture class = SF return = Tmp_1 share = 0.475 InvNomad=yes Tribal=yes }
		Infra_DoSpendHelper = { type = Agriculture class = NO return = Tmp_4 share = 0.25 }
	}
	else = {
		Infra_DoSpendHelper = { type = Agriculture class = SF return = Tmp_1 share = 0.60 InvNomad=yes Tribal=yes }
		Infra_DoSpendHelper = { type = Agriculture class = NO return = Tmp_4 share = 0.10 }
	}
	set_key = { lhs = Tmp_2 value = 0 }
	Infra_DoSpendHelper = { type = Agriculture class = NM return = Tmp_3 share = 0.70 Nomad=yes }
	Infra_DoSpendHelper = { type = Agriculture class = BG return = Tmp_5 share = 0.10 InvNomad=yes }
	if = {
		limit = {
			owner = { Rights_CLHie1Has = yes }
		}
		Infra_DoSpendHelper = { type = Agriculture class = CL return = Tmp_6 share = 0.2 InvNomad=yes }
	}
	else_if = {
		limit = {
			owner = { Rights_CLHie2Has = yes }
		}
		Infra_DoSpendHelper = { type = Agriculture class = CL return = Tmp_6 share = 0.15 InvNomad=yes }
	}
	else = {
		Infra_DoSpendHelper = { type = Agriculture class = CL return = Tmp_6 share = 0.1 InvNomad=yes }
	}
}
Infra_ShareOfferForestry = {
	Infra_DoSpendHelper = { type = Forestry class = SF return = Tmp_1 share = 0.4 Tribal=yes }
	set_key = { lhs = Tmp_2 value = 0 }
	set_key = { lhs = Tmp_3 value = 0 }
	Infra_DoSpendHelper = { type = Forestry class = NO return = Tmp_4 share = 0.35 }
	Infra_DoSpendHelper = { type = Forestry class = BG return = Tmp_5 share = 0.10 }
	if = {
		limit = {
			owner = { Rights_CLHie3Has = yes }
		}
		Infra_DoSpendHelper = { type = Forestry class = CL return = Tmp_6 share = 0.1 }
	}
	else_if = {
		limit = {
			owner = { Rights_CLHie2Has = yes }
		}
		Infra_DoSpendHelper = { type = Forestry class = CL return = Tmp_6 share = 0.15 }
	}
	else = {
		Infra_DoSpendHelper = { type = Forestry class = CL return = Tmp_6 share = 0.2 }
	}
}
Infra_ShareOfferFishery = {
	Infra_DoSpendHelper = { type = Fishery class = SF return = Tmp_1 share = 0.65 }
	set_key = { lhs = Tmp_2 value = 0 }
	set_key = { lhs = Tmp_3 value = 0 }
	Infra_DoSpendHelper = { type = Fishery class = NO return = Tmp_4 share = 0.2 }
	Infra_DoSpendHelper = { type = Fishery class = BG return = Tmp_5 share = 0.05 }
	Infra_DoSpendHelper = { type = Fishery class = CL return = Tmp_6 share = 0.1 }
}
Infra_ShareOfferExtraction = {
	Infra_DoSpendHelper = { type = Extraction class = SF return = Tmp_1 share = 0.45 Tribal=yes }
	set_key = { lhs = Tmp_2 value = 0 }
	set_key = { lhs = Tmp_3 value = 0 }
	Infra_DoSpendHelper = { type = Extraction class = NO return = Tmp_4 share = 0.35 }
	Infra_DoSpendHelper = { type = Extraction class = BG return = Tmp_5 share = 0.10 }
	if = {
		limit = {
			owner = { Rights_CLHie3Has = yes }
		}
		Infra_DoSpendHelper = { type = Extraction class = CL return = Tmp_6 share = 0.1 }
	}
	else_if = {
		limit = {
			owner = { Rights_CLHie2Has = yes }
		}
		Infra_DoSpendHelper = { type = Extraction class = CL return = Tmp_6 share = 0.15 }
	}
	else = {
		Infra_DoSpendHelper = { type = Extraction class = CL return = Tmp_6 share = 0.2 }
	}
}
Infra_ShareOfferIndustrial = {
	if = {
		limit = {
			has_province_flag = Industry_38Present
		}
		Infra_DoSpendHelper = { type = Industrial class = SF return = Tmp_1 share = 0.25 Tribal=yes }
	}
	else = {
		set_key = { lhs = Tmp_1 value = 0 }
	}
	Infra_DoSpendHelper = { type = Industrial class = RE return = Tmp_2 share = 0.60 Tribal=yes }
	set_key = { lhs = Tmp_3 value = 0 }
	if = {
		limit = {
			owner = { Rights_NOGov1Has = yes }
		}
		Infra_DoSpendHelper = { type = Industrial class = NO return = Tmp_4 share = 0.3 }
	}
	else_if = {
		limit = {
			owner = { Rights_NOGov2Has = yes }
		}
		Infra_DoSpendHelper = { type = Industrial class = NO return = Tmp_4 share = 0.25 }
	}
	else_if = {
		limit = {
			owner = { Rights_NOGov3Has = yes }
		}
		Infra_DoSpendHelper = { type = Industrial class = NO return = Tmp_4 share = 0.2 }
	}
	else_if = {
		limit = {
			owner = { Rights_NOGov4Has = yes }
		}
		Infra_DoSpendHelper = { type = Industrial class = NO return = Tmp_4 share = 0.25 }
	}
	else_if = {
		limit = {
			owner = { Rights_NOGov5Has = yes }
		}
		Infra_DoSpendHelper = { type = Industrial class = NO return = Tmp_4 share = 0.2 }
	}
	else = {
		Infra_DoSpendHelper = { type = Industrial class = NO return = Tmp_4 share = 0.10 }
	}
	Infra_DoSpendHelper = { type = Industrial class = BG return = Tmp_5 share = 0.30 }
	if = {
		limit = {
			owner = { Rights_CLHie3Has = yes }
		}
		Infra_DoSpendHelper = { type = Industrial class = CL return = Tmp_6 share = 0.08 }
	}
	else_if = {
		limit = {
			owner = { Rights_CLHie2Has = yes }
		}
		Infra_DoSpendHelper = { type = Industrial class = CL return = Tmp_6 share = 0.12 }
	}
	else = {
		Infra_DoSpendHelper = { type = Industrial class = CL return = Tmp_6 share = 0.15 }
	}
}
Infra_ShareOfferCommercial = {
	set_key = { lhs = Tmp_1 value = 0 }
	Infra_DoSpendHelper = { type = Commercial class = RE return = Tmp_2 share = 0.06 Tribal=yes }
	set_key = { lhs = Tmp_3 value = 0 }
	if = {
		limit = {
			owner = { Rights_BGCom6HasGreater = yes }
		}
		Infra_DoSpendHelper = { type = Commercial class = NO return = Tmp_4 share = 0.02 }
	}
	else = {
		Infra_DoSpendHelper = { type = Commercial class = NO return = Tmp_4 share = 0.1 }
	}
	Infra_DoSpendHelper = { type = Commercial class = BG return = Tmp_5 share = 0.93 }
	set_key = { lhs = Tmp_6 value = 0 }
}
Infra_ShareOfferAcademic = {
	set_key = { lhs = Tmp_1 value = 0 }
	set_key = { lhs = Tmp_3 value = 0 }
	set_key = { lhs = Tmp_4 value = 0 }
	if = {
		limit = {
			has_province_flag = Industry_30Present
		}
		Infra_DoSpendHelper = { type = Academic class = RE return = Tmp_2 share = 0.5 }
		Infra_DoSpendHelper = { type = Academic class = BG return = Tmp_5 share = 0.1 }
		Infra_DoSpendHelper = { type = Academic class = CL return = Tmp_6 share = 0.4 }
	}
	else = {
		set_key = { lhs = Tmp_2 value = 0 }
		set_key = { lhs = Tmp_5 value = 0 }
		Infra_DoSpendHelper = { type = Academic class = CL return = Tmp_6 share = 1 }
	}
}

Infra_DoSpend = { # total expenditure of building maintenance. What estates and state have to pay to maintain, including what they have to pay to maintain their share.
	set_key = { lhs = SF_Spend$type$ value = 0 }
	set_key = { lhs = RE_Spend$type$ value = 0 }
	set_key = { lhs = NM_Spend$type$ value = 0 }
	set_key = { lhs = NO_Spend$type$ value = 0 }
	set_key = { lhs = BG_Spend$type$ value = 0 }
	set_key = { lhs = CL_Spend$type$ value = 0 }
	set_key = { lhs = BU_Spend$type$ value = 0 }
	
	if = {
		limit = { # remove necessary amount of spending maintenance from the amount state invested.
			check_key = { lhs = Building_$type$Spend which = Building_$type$Wealth }
		}
		subtract_key = { lhs = Building_$type$Spend which = Building_$type$Wealth }
		
		set_key = { lhs = Building_$type$Wealth value = 0 }
	}
	else = { # if state investment is higher than spending, break code
		subtract_key = { lhs = Building_$type$Wealth which = Building_$type$Spend }
		
		set_key = { lhs = Building_$type$Spend value = 0 }
	}
	
	if = {
		limit = {
			check_key = { lhs = Building_$type$Spend value = 0.001 }
		}
		set_key = { lhs = Tmp_0 value = 0 }
		
		Infra_ShareOffer$type$ = yes
			
		if = { # calc % of wealth of each.
			limit = {
				check_key = { lhs = Tmp_0 value = 0.01 }
			}
			set_key = { lhs = Tmp_7 which = BU_Prp$type$ }
			multiply_key = { lhs = Tmp_7 value = 0.01 }
			
			if = {
				limit = {
					always = $Mine$
					OR = {
						has_province_flag = salt
						AND = {
							has_port = yes
							NOT = { has_province_flag = pm }
						}
					}
				}
				set_key = { lhs = Tmp_8 value = 0.875 }
				multiply_key = { lhs = Tmp_8 which = Prov_BUPow }
				multiply_key = { lhs = Tmp_8 value = 0.01 }
				change_key = { lhs = Tmp_8 value = 0.125 }
				multiply_key = { lhs = Tmp_8 value = $BU$ }
				if = {
					limit = {
						NOT = { check_key = { lhs = Tmp_7 which = Tmp_8 } }
					}
					set_key = { lhs = Tmp_7 which = Tmp_8 }
				}
			}
			else_if = {
				limit = {
					NOT = { check_key = { lhs = Tmp_7 value = $BU$ } }
					[[Uni]always = $Uni$
					has_province_flag = Industry_30Present
					]
				}
				set_key = { lhs = Tmp_7 value = $BU$ } # unused
			}
			if = {
				limit = {
					has_global_flag = POP_Sim
				}
				if = {
					limit = {
						NOT = { has_global_flag = POP_Sim10 }
					}
					trigger_switch = {
						on_trigger = has_building
						
						maint_$type$_no = { multiply_key = { lhs = Tmp_7 value = 0.25 } }
						maint_$type$_low = { multiply_key = { lhs = Tmp_7 value = 0.5 } }
						maint_$type$_med = { multiply_key = { lhs = Tmp_7 value = 0.75 } }
						maint_$type$_high = { multiply_key = { lhs = Tmp_7 value = 1 } }
					}
				}
			}
			else = {
				trigger_switch = {
					on_trigger = has_building
					
					maint_$type$_no = { multiply_key = { lhs = Tmp_7 value = 0.10 } }
					maint_$type$_low = { multiply_key = { lhs = Tmp_7 value = 0.333 } }
					maint_$type$_med = { multiply_key = { lhs = Tmp_7 value = 0.666 } }
					maint_$type$_high = { multiply_key = { lhs = Tmp_7 value = 1 } }
				}
			}
			set_key = { lhs = Tmp_8 value = 100 }
			subtract_key = { lhs = Tmp_8 which = Prov_TRPow }
			multiply_key = { lhs = Tmp_8 value = 0.005 }
			change_key = { lhs = Tmp_8 value = 0.5 }
			
			multiply_key = { lhs = Tmp_7 which = Tmp_8 }
			
			if = { # calc % of wealth of each.
				limit = {
					check_key = { lhs = Tmp_7 value = 0.01 }
				}
				set_key = { lhs = Tmp_8 value = 1 }
				subtract_key = { lhs = Tmp_8 which = Tmp_7 }
				set_key = { lhs = Tmp_7 which = Tmp_0 }
				divide_key = { lhs = Tmp_7 which = Tmp_8 }
				subtract_key = { lhs = Tmp_7 which = Tmp_0 }
			}
			
			change_key = { lhs = Tmp_0 which = Tmp_7 }
			
			# calc % of wealth of each.
			if = {
				limit = {
					check_key = { lhs = Tmp_1 value = 0.01 }
				}
				divide_key = { lhs = Tmp_1 which = Tmp_0 }
			}
			if = {
				limit = {
					check_key = { lhs = Tmp_2 value = 0.01 }
				}
				divide_key = { lhs = Tmp_2 which = Tmp_0 }
			}
			if = {
				limit = {
					check_key = { lhs = Tmp_3 value = 0.01 }
				}
				divide_key = { lhs = Tmp_3 which = Tmp_0 }
			}
			if = {
				limit = {
					check_key = { lhs = Tmp_4 value = 0.01 }
				}
				divide_key = { lhs = Tmp_4 which = Tmp_0 }
			}
			if = {
				limit = {
					check_key = { lhs = Tmp_5 value = 0.01 }
				}
				divide_key = { lhs = Tmp_5 which = Tmp_0 }
			}
			if = {
				limit = {
					check_key = { lhs = Tmp_6 value = 0.01 }
				}
				divide_key = { lhs = Tmp_6 which = Tmp_0 }
			}
			if = {
				limit = {
					check_key = { lhs = Tmp_7 value = 0.01 }
				}
				divide_key = { lhs = Tmp_7 which = Tmp_0 }
			}
			
			set_key = { lhs = Tmp_8 value = 0 }
			
			multiply_key = { lhs = Tmp_1 which = Building_$type$Spend } # multiply building actual spending maintenance by each powerbroker % of wealth weight
			multiply_key = { lhs = Tmp_2 which = Building_$type$Spend }
			multiply_key = { lhs = Tmp_3 which = Building_$type$Spend }
			multiply_key = { lhs = Tmp_4 which = Building_$type$Spend }
			multiply_key = { lhs = Tmp_5 which = Building_$type$Spend } 
			multiply_key = { lhs = Tmp_6 which = Building_$type$Spend }
			multiply_key = { lhs = Tmp_7 which = Building_$type$Spend }
			
			change_key = { lhs = SF_SpendPrp which = Tmp_1 } # add that spending to each powerbroker
			change_key = { lhs = RE_SpendPrp which = Tmp_2 }
			change_key = { lhs = NM_SpendPrp which = Tmp_3 }
			change_key = { lhs = NO_SpendPrp which = Tmp_4 }
			change_key = { lhs = BG_SpendPrp which = Tmp_5 }
			change_key = { lhs = CL_SpendPrp which = Tmp_6 }
			change_key = { lhs = BU_SpendPrp which = Tmp_7 }
			
			change_key = { lhs = SF_Spend$type$ which = Tmp_1 } # the spending also adds to increase their size of ownership of building
			change_key = { lhs = RE_Spend$type$ which = Tmp_2 }
			change_key = { lhs = NM_Spend$type$ which = Tmp_3 }
			change_key = { lhs = NO_Spend$type$ which = Tmp_4 }
			change_key = { lhs = BG_Spend$type$ which = Tmp_5 }
			change_key = { lhs = CL_Spend$type$ which = Tmp_6 }
			change_key = { lhs = BU_Spend$type$ which = Tmp_7 }
			
			multiply_key = { lhs = Tmp_1 value = 0.1 } 
			multiply_key = { lhs = Tmp_2 value = 0.1 }
			multiply_key = { lhs = Tmp_3 value = 0.1 }
			multiply_key = { lhs = Tmp_4 value = 0.1 }
			multiply_key = { lhs = Tmp_5 value = 0.1 }
			multiply_key = { lhs = Tmp_6 value = 0.1 }
			multiply_key = { lhs = Tmp_7 value = 0.1 }
			
			change_key = { lhs = Building_$type$ShareSF which = Tmp_1 } # % share
			change_key = { lhs = Building_$type$ShareRE which = Tmp_2 }
			change_key = { lhs = Building_$type$ShareNM which = Tmp_3 }
			change_key = { lhs = Building_$type$ShareNO which = Tmp_4 }
			change_key = { lhs = Building_$type$ShareBG which = Tmp_5 }
			change_key = { lhs = Building_$type$ShareCL which = Tmp_6 }
			change_key = { lhs = Building_$type$ShareBU which = Tmp_7 }
		}
	}
	if = {
		limit = {
			check_key = { lhs = Building_$type$Loss value = 0.001 }
		}
		set_key = { lhs = Tmp_1 which = SF_Prp$type$ }
		set_key = { lhs = Tmp_2 which = RE_Prp$type$ }
		set_key = { lhs = Tmp_3 which = NM_Prp$type$ }
		set_key = { lhs = Tmp_4 which = NO_Prp$type$ }
		set_key = { lhs = Tmp_5 which = BG_Prp$type$ }
		set_key = { lhs = Tmp_6 which = CL_Prp$type$ }
		set_key = { lhs = Tmp_7 which = BU_Prp$type$ }
		
		multiply_key = { lhs = Tmp_1 value = 0.01 }
		multiply_key = { lhs = Tmp_2 value = 0.01 }
		multiply_key = { lhs = Tmp_3 value = 0.01 }
		multiply_key = { lhs = Tmp_4 value = 0.01 }
		multiply_key = { lhs = Tmp_5 value = 0.01 }
		multiply_key = { lhs = Tmp_6 value = 0.01 }
		multiply_key = { lhs = Tmp_7 value = 0.01 }
		
		multiply_key = { lhs = Tmp_1 which = Building_$type$Loss }
		multiply_key = { lhs = Tmp_2 which = Building_$type$Loss }
		multiply_key = { lhs = Tmp_3 which = Building_$type$Loss }
		multiply_key = { lhs = Tmp_4 which = Building_$type$Loss }
		multiply_key = { lhs = Tmp_5 which = Building_$type$Loss }
		multiply_key = { lhs = Tmp_6 which = Building_$type$Loss }
		multiply_key = { lhs = Tmp_7 which = Building_$type$Loss }
		
		change_key = { lhs = SF_SpendPrp which = Tmp_1 } # add that spending to each powerbroker
		change_key = { lhs = RE_SpendPrp which = Tmp_2 }
		change_key = { lhs = NM_SpendPrp which = Tmp_3 }
		change_key = { lhs = NO_SpendPrp which = Tmp_4 }
		change_key = { lhs = BG_SpendPrp which = Tmp_5 }
		change_key = { lhs = CL_SpendPrp which = Tmp_6 }
		change_key = { lhs = BU_SpendPrp which = Tmp_7 }
		
		change_key = { lhs = SF_Spend$type$ which = Tmp_1 }
		change_key = { lhs = RE_Spend$type$ which = Tmp_2 }
		change_key = { lhs = NM_Spend$type$ which = Tmp_3 }
		change_key = { lhs = NO_Spend$type$ which = Tmp_4 }
		change_key = { lhs = BG_Spend$type$ which = Tmp_5 }
		change_key = { lhs = CL_Spend$type$ which = Tmp_6 }
		change_key = { lhs = BU_Spend$type$ which = Tmp_7 }
		
		change_key = { lhs = Building_$type$Spend which = Building_$type$Loss }
	}
}

Infra_DoDecay = { # add decay
	if = {
		limit = {
			check_key = { lhs = Building_$type$ value = 0.001 }
		}
		multiply_key = { lhs = Building_$type$ShareSF value = 0.98 }
		multiply_key = { lhs = Building_$type$ShareNM value = 0.98 }
		multiply_key = { lhs = Building_$type$ShareRE value = 0.98 }
		multiply_key = { lhs = Building_$type$ShareNO value = 0.98 }
		multiply_key = { lhs = Building_$type$ShareBG value = 0.98 }
		multiply_key = { lhs = Building_$type$ShareCL value = 0.98 }
		multiply_key = { lhs = Building_$type$ShareBU value = 0.98 }
	}
}

Infra_CheckClass = { # remove dead classes
	if = {
		limit = {
			NOT = { check_key = { lhs = $class$_Total value = 0.001 } }
		}
		set_key = { lhs = Building_AgricultureShare$class$ value = 0 }
		set_key = { lhs = Building_ExtractionShare$class$ value = 0 }
		set_key = { lhs = Building_FisheryShare$class$ value = 0 }
		set_key = { lhs = Building_ForestryShare$class$ value = 0 }
		set_key = { lhs = Building_IndustrialShare$class$ value = 0 }
		set_key = { lhs = Building_AcademicShare$class$ value = 0 }
		set_key = { lhs = Building_CommercialShare$class$ value = 0 }
	}
}
Infra_CheckBU = {
	if = {
		limit = {
			isValidProv = no
		}
		set_key = { lhs = Building_AgricultureShareBU value = 0 }
		set_key = { lhs = Building_ExtractionShareBU value = 0 }
		set_key = { lhs = Building_FisheryShareBU value = 0 }
		set_key = { lhs = Building_ForestryShareBU value = 0 }
		set_key = { lhs = Building_IndustrialShareBU value = 0 }
		set_key = { lhs = Building_AcademicShareBU value = 0 }
		set_key = { lhs = Building_CommercialShareBU value = 0 }
	}
}
Infra_InitPrp = {
	set_key = { lhs = Building_$Building$ShareSF value = $SF$ }
	if = {
		limit = {
			check_key = { lhs = NM_Total value = 0.1 }
		}
		set_key = { lhs = Building_$Building$ShareNM value = $NM$ }
	}
	else = {
		change_key = { lhs = Building_$Building$ShareSF value = $NM$ }
	}
	set_key = { lhs = Building_$Building$ShareRE value = $RE$ }
	set_key = { lhs = Building_$Building$ShareNO value = $NO$ }
	set_key = { lhs = Building_$Building$ShareBG value = $BG$ }
	set_key = { lhs = Building_$Building$ShareCL value = $CL$ }
	set_key = { lhs = Building_$Building$ShareBU value = $BU$ }
}

Infra_DoShare = { # calculate share of each player in %
	set_key = { lhs = Tmp_0 which = Building_$type$ShareSF }
	change_key = { lhs = Tmp_0 which = Building_$type$ShareRE }
	change_key = { lhs = Tmp_0 which = Building_$type$ShareNM }
	change_key = { lhs = Tmp_0 which = Building_$type$ShareNO }
	change_key = { lhs = Tmp_0 which = Building_$type$ShareBG }
	change_key = { lhs = Tmp_0 which = Building_$type$ShareCL }
	change_key = { lhs = Tmp_0 which = Building_$type$ShareBU }
	
	if = {
		limit = {
			check_key = { lhs = Tmp_0 value = 0.001 }
		}
		set_key = { lhs = SF_$type$ which = Building_$type$ShareSF }
		set_key = { lhs = RE_$type$ which = Building_$type$ShareRE }
		set_key = { lhs = NM_$type$ which = Building_$type$ShareNM }
		set_key = { lhs = NO_$type$ which = Building_$type$ShareNO }
		set_key = { lhs = BG_$type$ which = Building_$type$ShareBG }
		set_key = { lhs = CL_$type$ which = Building_$type$ShareCL }
		set_key = { lhs = BU_$type$ which = Building_$type$ShareBU }
		
		divide_key = { lhs = SF_$type$ value = 10 }
		divide_key = { lhs = RE_$type$ value = 10 }
		divide_key = { lhs = NM_$type$ value = 10 }
		divide_key = { lhs = NO_$type$ value = 10 }
		divide_key = { lhs = BG_$type$ value = 10 }
		divide_key = { lhs = CL_$type$ value = 10 }
		divide_key = { lhs = BU_$type$ value = 10 }
		
		multiply_key = { lhs = SF_$type$ which = Building_$type$ }
		multiply_key = { lhs = RE_$type$ which = Building_$type$ }
		multiply_key = { lhs = NM_$type$ which = Building_$type$ }
		multiply_key = { lhs = NO_$type$ which = Building_$type$ }
		multiply_key = { lhs = BG_$type$ which = Building_$type$ }
		multiply_key = { lhs = CL_$type$ which = Building_$type$ }
		multiply_key = { lhs = BU_$type$ which = Building_$type$ }
		
		divide_key = { lhs = SF_$type$ which = Tmp_0 }
		divide_key = { lhs = RE_$type$ which = Tmp_0 }
		divide_key = { lhs = NM_$type$ which = Tmp_0 }
		divide_key = { lhs = NO_$type$ which = Tmp_0 }
		divide_key = { lhs = BG_$type$ which = Tmp_0 }
		divide_key = { lhs = CL_$type$ which = Tmp_0 }
		divide_key = { lhs = BU_$type$ which = Tmp_0 }
		
		multiply_key = { lhs = SF_$type$ value = 10 }
		multiply_key = { lhs = RE_$type$ value = 10 }
		multiply_key = { lhs = NM_$type$ value = 10 }
		multiply_key = { lhs = NO_$type$ value = 10 }
		multiply_key = { lhs = BG_$type$ value = 10 }
		multiply_key = { lhs = CL_$type$ value = 10 }
		multiply_key = { lhs = BU_$type$ value = 10 }
	}
}

Infra_SetFillInfra = {
    set_key = { lhs = Tmp_0 value = 0 }

    set_key = { lhs = Tmp_1 which = Infra_22 }
    multiply_key = { lhs = Tmp_1 which = TN_ProvPrc22 }
    change_key = { lhs = Tmp_0 which = Tmp_1 }

    set_key = { lhs = Tmp_1 which = Infra_23 }
    multiply_key = { lhs = Tmp_1 which = TN_ProvPrc23 }
    change_key = { lhs = Tmp_0 which = Tmp_1 }

    set_key = { lhs = Tmp_1 which = Infra_24 }
    multiply_key = { lhs = Tmp_1 which = TN_ProvPrc24 }
    change_key = { lhs = Tmp_0 which = Tmp_1 }

    set_key = { lhs = Tmp_1 which = Infra_41 }
    multiply_key = { lhs = Tmp_1 which = TN_ProvPrc41 }
    change_key = { lhs = Tmp_0 which = Tmp_1 }

    set_key = { lhs = Tmp_1 which = Infra_R }
    multiply_key = { lhs = Tmp_1 which = Class_PR }
    change_key = { lhs = Tmp_0 which = Tmp_1 }

    set_key = { lhs = Tmp_1 which = Infra_UL }
    multiply_key = { lhs = Tmp_1 which = Class_PUL }
    change_key = { lhs = Tmp_0 which = Tmp_1 }

    set_key = { lhs = Tmp_1 which = Infra_Wealth }
    multiply_key = { lhs = Tmp_1 value = 0.2 }

    if = {
        limit = {
            check_key = { lhs = Tmp_1 which = Tmp_0 }
        }
        set_key = { lhs = Infra_Fill value = 100 }
    }
    else = {
        set_key = { lhs = Infra_Fill which = Tmp_1 }
        multiply_key = { lhs = Infra_Fill value = 100 }
        divide_key = { lhs = Infra_Fill which = Tmp_0 }

        multiply_key = { lhs = Infra_22 which = Infra_Fill }
        multiply_key = { lhs = Infra_23 which = Infra_Fill }
        multiply_key = { lhs = Infra_24 which = Infra_Fill }
        multiply_key = { lhs = Infra_41 which = Infra_Fill }
        multiply_key = { lhs = Infra_R which = Infra_Fill }
        multiply_key = { lhs = Infra_UL which = Infra_Fill }

		multiply_key = { lhs = Infra_22 value = 0.01 }
		multiply_key = { lhs = Infra_23 value = 0.01 }
		multiply_key = { lhs = Infra_24 value = 0.01 }
		multiply_key = { lhs = Infra_41 value = 0.01 }
		multiply_key = { lhs = Infra_R value = 0.01 }
		multiply_key = { lhs = Infra_UL value = 0.01 }
    }

    set_key = { lhs = Tmp_0 value = 0 }
    set_key = { lhs = Tmp_1 value = 0 }
}

Infra_SetCostPerUnit = {
    set_key = { lhs = Infra_$type$SizeCost1 value = 0 }

    Infra_GetCostBuild$type$ = yes

    [[prod1] 
        multiply_key = { lhs = Infra_Cost$prod1$ which = TN_ProvPrc$prod1$ }
        change_key = { lhs = Infra_$type$SizeCost1 which = Infra_Cost$prod1$ }
    ]
    [[prod2] 
        multiply_key = { lhs = Infra_Cost$prod2$ which = TN_ProvPrc$prod2$ }
        change_key = { lhs = Infra_$type$SizeCost1 which = Infra_Cost$prod2$ }
    ]
    [[prod3] 
        multiply_key = { lhs = Infra_Cost$prod3$ which = TN_ProvPrc$prod3$ }
        change_key = { lhs = Infra_$type$SizeCost1 which = Infra_Cost$prod3$ }
    ]

    [[labor] 
        multiply_key = { lhs = Infra_Cost$labor$ which = Class_P$labor$ }
        change_key = { lhs = Infra_$type$SizeCost1 which = Infra_Cost$labor$ }
    ]

    set_key = { lhs = Infra_$type$SizeCost10 which = Infra_$type$SizeCost1 }
    multiply_key = { lhs = Infra_$type$SizeCost10 value = 10 }
	
	set_key = { lhs = Infra_$type$GoalCost which = Infra_$type$Goal }
	subtract_key = { lhs = Infra_$type$GoalCost which = Infra_$type$Size }	
	multiply_key = { lhs = Infra_$type$GoalCost which = Infra_$type$SizeCost1 }

    [[prod1] set_key = { lhs = Infra_Cost$prod1$ value = 0 }]
    [[prod2] set_key = { lhs = Infra_Cost$prod2$ value = 0 }]
    [[prod3] set_key = { lhs = Infra_Cost$prod3$ value = 0 }]
    [[labor] set_key = { lhs = Infra_Cost$labor$ value = 0 }]
}
#Buildings maintenance
Infra_SetSpendInfra = {
    set_key = { lhs = Infra_$type$Spend value = 0 }
    set_key = { lhs = Infra_State$type$Spend value = 0 }

    if = {
        limit = {
            check_key = { lhs = Infra_$type$Size value = 1 }
        }
        Infra_GetCostMaint$type$ = yes

        [[prod1] 
            multiply_key = { lhs = Infra_Cost$prod1$ which = Infra_$type$Size }
            multiply_key = { lhs = Infra_Cost$prod1$ which = TN_SectorSpend$prod1$ }
            change_key = { lhs = Infra_$type$Spend which = Infra_Cost$prod1$ }
        ]
        [[prod2] 
            multiply_key = { lhs = Infra_Cost$prod2$ which = Infra_$type$Size }
            multiply_key = { lhs = Infra_Cost$prod2$ which = TN_SectorSpend$prod2$ }
            change_key = { lhs = Infra_$type$Spend which = Infra_Cost$prod2$ }
        ]
        [[prod3] 
            multiply_key = { lhs = Infra_Cost$prod3$ which = Infra_$type$Size }
            multiply_key = { lhs = Infra_Cost$prod3$ which = TN_SectorSpend$prod3$ }
            change_key = { lhs = Infra_$type$Spend which = Infra_Cost$prod3$ }
        ]

        [[labor] 
            multiply_key = { lhs = Infra_Cost$labor$ which = Infra_$type$Size }
            multiply_key = { lhs = Infra_Cost$labor$ which = Class_P$labor$ }
            multiply_key = { lhs = Infra_Cost$labor$ which = Prod_Fill$labor$ }
			multiply_key = { lhs = Infra_Cost$labor$ value = 0.01 }
            change_key = { lhs = Infra_$type$Spend which = Infra_Cost$labor$ }
        ]

		if = {
			limit = {
				OR = {
					has_province_flag = Infra_$type$100
					[[StateFunded] always = $StateFunded$ ]
				}
			}
			change_key = { lhs = Infra_StateSpend which = Infra_$type$Spend }
			change_key = { lhs = Infra_State$type$Spend which = Infra_$type$Spend }
		}
		else_if = {
			limit = {
				has_province_flag = Infra_$type$75
			}
			set_key = { lhs = Tmp_0 which = Infra_$type$Spend }
			multiply_key = { lhs = Tmp_0 value = 0.75 }
			change_key = { lhs = Infra_StateSpend which = Tmp_0 }
			change_key = { lhs = Infra_State$type$Spend which = Tmp_0 }

			multiply_key = { lhs = Infra_$type$Spend value = 0.25 }
			multiply_key = { lhs = Infra_$type$Spend which = Infra_Fill }
			multiply_key = { lhs = Infra_$type$Spend value = 0.01 }
			change_key = { lhs = Infra_$type$Spend which = Tmp_0 }
		}
		else_if = {
			limit = {
				has_province_flag = Infra_$type$50
			}
			divide_key = { lhs = Infra_$type$Spend value = 2 }
			set_key = { lhs = Tmp_0 which = Infra_$type$Spend }
			change_key = { lhs = Infra_StateSpend which = Infra_$type$Spend }
			change_key = { lhs = Infra_State$type$Spend which = Infra_$type$Spend }

			multiply_key = { lhs = Infra_$type$Spend which = Infra_Fill }
			multiply_key = { lhs = Infra_$type$Spend value = 0.01 }
			change_key = { lhs = Infra_$type$Spend which = Tmp_0 }
		}
		else_if = {
			limit = {
				OR = {
					has_province_flag = Infra_$type$25
					AND = {
						always = $StateBased$
						NOT = { has_global_flag = POP_Sim }
						owner = { ai = yes }
					}
				}
			}
			divide_key = { lhs = Infra_$type$Spend value = 4 }
			set_key = { lhs = Tmp_0 which = Infra_$type$Spend }
			change_key = { lhs = Infra_StateSpend which = Infra_$type$Spend }
			change_key = { lhs = Infra_State$type$Spend which = Infra_$type$Spend }

			multiply_key = { lhs = Infra_$type$Spend value = 3 }
			multiply_key = { lhs = Infra_$type$Spend which = Infra_Fill }
			multiply_key = { lhs = Infra_$type$Spend value = 0.01 }
			change_key = { lhs = Infra_$type$Spend which = Tmp_0 }
		}
		else = {
			multiply_key = { lhs = Infra_$type$Spend which = Infra_Fill }
			multiply_key = { lhs = Infra_$type$Spend value = 0.01 }
		}

        [[prod1] set_key = { lhs = Infra_Cost$prod1$ value = 0 }]
        [[prod2] set_key = { lhs = Infra_Cost$prod2$ value = 0 }]
        [[prod3] set_key = { lhs = Infra_Cost$prod3$ value = 0 }]
        [[labor] set_key = { lhs = Infra_Cost$labor$ value = 0 }]
    }
}

Infra_CheckInfra = {
    if = {
        limit = {
            check_key = { lhs = Infra_$type$Size value = 1 }
        }
        multiply_key = { lhs = Infra_$type$Decay value = 0.95 }

		if = {
			limit = {
				OR = {
					has_province_flag = Infra_$type$100
					[[StateFunded] always = $StateFunded$ ]
				}
			}
			set_key = { lhs = Tmp_1 value = 100 }
		}
		else_if = {
			limit = {
				has_province_flag = Infra_$type$50
			}
			set_key = { lhs = Tmp_1 value = 100 }
			change_key = { lhs = Tmp_1 which = Infra_Fill }
			divide_key = { lhs = Tmp_1 value = 2 }
		}
		else_if = {
			limit = {
				OR = {
					has_province_flag = Infra_$type$25
					AND = {
					   always = $StateBased$
					   NOT = { has_global_flag = POP_Sim }
					   owner = { ai = yes }
					}
				}
			}
			set_key = { lhs = Tmp_1 which = Infra_Fill }
			multiply_key = { lhs = Tmp_1 value = 0.75 }
			change_key = { lhs = Tmp_1 value = 25 }
		}
		else = {
			set_key = { lhs = Tmp_1 which = Infra_Fill }
		}

        set_key = { lhs = Tmp_0 value = 0 }

        [[prod1] change_key = { lhs = Tmp_0 which = TN_ProvFill$prod1$ }]
        [[prod2] change_key = { lhs = Tmp_0 which = TN_ProvFill$prod2$ }]
        [[prod3] change_key = { lhs = Tmp_0 which = TN_ProvFill$prod3$ }]
        [[labor] change_key = { lhs = Tmp_0 which = Prod_Fill$labor$ }]

        multiply_key = { lhs = Tmp_0 which = Tmp_1 }
        divide_key = { lhs = Tmp_0 value = -$num$00000 }
        change_key = { lhs = Tmp_0 value = 0.1 }

        change_key = { lhs = Infra_$type$Decay which = Tmp_0 }

        if = {
            limit = {
                check_key = { lhs = Infra_$type$Decay value = 1 }
            }
            set_key = { lhs = Infra_$type$Decay value = 0 }

            subtract_key = { lhs = Infra_$type$Size value = 1 }

            Infra_SetRankInfra = { type = $type$ }
        }

        set_key = { lhs = Tmp_0 value = 0 }
        set_key = { lhs = Tmp_1 value = 0 }
    }
    else = {
        set_key = { lhs = Infra_$type$Decay value = 0 }
    }
}

Infra_SetMaintInfra = {
    if = {
        limit = {
            check_key = { lhs = Infra_$type$Size value = 1 }
        }
        Infra_GetCostMaint$type$ = yes

        [[prod1] multiply_key = { lhs = Infra_Cost$prod1$ which = Infra_$type$Size }]
        [[prod2] multiply_key = { lhs = Infra_Cost$prod2$ which = Infra_$type$Size }]
        [[prod3] multiply_key = { lhs = Infra_Cost$prod3$ which = Infra_$type$Size }]
        [[labor] multiply_key = { lhs = Infra_Cost$labor$ which = Infra_$type$Size }]

        if = {
            limit = {
				OR = {
					has_province_flag = Infra_$type$100
					[[StateFunded] always = $StateFunded$ ]
				}
            }
            [[prod1] change_key = { lhs = Infra_State$prod1$ which = Infra_Cost$prod1$ }]
            [[prod2] change_key = { lhs = Infra_State$prod2$ which = Infra_Cost$prod2$ }]
            [[prod3] change_key = { lhs = Infra_State$prod3$ which = Infra_Cost$prod3$ }]
            [[labor] change_key = { lhs = Infra_State$labor$ which = Infra_Cost$labor$ }]
        }
        else_if = {
            limit = {
                has_province_flag = Infra_$type$50
            }
            [[prod1] 
                divide_key = { lhs = Infra_Cost$prod1$ value = 2 }
                change_key = { lhs = Infra_State$prod1$ which = Infra_Cost$prod1$ }
                change_key = { lhs = Infra_$prod1$ which = Infra_Cost$prod1$ }
            ]
            [[prod2] 
                divide_key = { lhs = Infra_Cost$prod2$ value = 2 }
                change_key = { lhs = Infra_State$prod2$ which = Infra_Cost$prod2$ }
                change_key = { lhs = Infra_$prod2$ which = Infra_Cost$prod2$ }
            ]
            [[prod3] 
                divide_key = { lhs = Infra_Cost$prod3$ value = 2 }
                change_key = { lhs = Infra_State$prod3$ which = Infra_Cost$prod3$ }
                change_key = { lhs = Infra_$prod3$ which = Infra_Cost$prod3$ }
            ]
            [[labor] 
                divide_key = { lhs = Infra_Cost$labor$ value = 2 }
                change_key = { lhs = Infra_State$labor$ which = Infra_Cost$labor$ }
                change_key = { lhs = Infra_$labor$ which = Infra_Cost$labor$ }
            ]
        }
        else_if = {
            limit = {
				OR = {
					has_province_flag = Infra_$type$25
					[[StateBased]
					AND = {
					   always = $StateBased$
					   NOT = { has_global_flag = POP_Sim }
					   owner = { ai = yes }
					}
					]
				}
            }
            [[prod1] 
                divide_key = { lhs = Infra_Cost$prod1$ value = 4 }
                change_key = { lhs = Infra_State$prod1$ which = Infra_Cost$prod1$ }
                multiply_key = { lhs = Infra_Cost$prod1$ value = 3 }
                change_key = { lhs = Infra_$prod1$ which = Infra_Cost$prod1$ }
            ]
            [[prod2] 
                divide_key = { lhs = Infra_Cost$prod2$ value = 4 }
                change_key = { lhs = Infra_State$prod2$ which = Infra_Cost$prod2$ }
                multiply_key = { lhs = Infra_Cost$prod2$ value = 3 }
                change_key = { lhs = Infra_$prod2$ which = Infra_Cost$prod2$ }
            ]
            [[prod3] 
                divide_key = { lhs = Infra_Cost$prod3$ value = 4 }
                change_key = { lhs = Infra_State$prod3$ which = Infra_Cost$prod3$ }
                multiply_key = { lhs = Infra_Cost$prod3$ value = 3 }
                change_key = { lhs = Infra_$prod3$ which = Infra_Cost$prod3$ }
            ]
            [[labor] 
                divide_key = { lhs = Infra_Cost$labor$ value = 4 }
                change_key = { lhs = Infra_State$labor$ which = Infra_Cost$labor$ }
                multiply_key = { lhs = Infra_Cost$labor$ value = 3 }
                change_key = { lhs = Infra_$labor$ which = Infra_Cost$labor$ }
            ]
        }
        else = {
            [[prod1] change_key = { lhs = Infra_$prod1$ which = Infra_Cost$prod1$ }]
            [[prod2] change_key = { lhs = Infra_$prod2$ which = Infra_Cost$prod2$ }]
            [[prod3] change_key = { lhs = Infra_$prod3$ which = Infra_Cost$prod3$ }]
            [[labor] change_key = { lhs = Infra_$labor$ which = Infra_Cost$labor$ }]
        }

        [[prod1] set_key = { lhs = Infra_Cost$prod1$ value = 0 }]
        [[prod2] set_key = { lhs = Infra_Cost$prod2$ value = 0 }]
        [[prod3] set_key = { lhs = Infra_Cost$prod3$ value = 0 }]
        [[labor] set_key = { lhs = Infra_Cost$labor$ value = 0 }]
    }
}

Infra_DoIncomeInfra = {
    if = {
        limit = {
            check_key = { lhs = $class$_Wealth value = 10 }
            check_key = { lhs = Prov_$class$Pow value = 0.001 }
            check_key = { lhs = $class$_Total value = 0.001 }
        }
		set_key = { lhs = Tmp_0 value = 25 }
        change_key = { lhs = Tmp_0 which = Prov_$class$Pow }
		multiply_key = { lhs = Tmp_0 which = $class$_Wealth }
		if = {
			limit = {
				check_key = { lhs = Tmp_0 value = 0.01 }
			}
			divide_key = { lhs = Tmp_0 value = $div$ }
			if = {
				limit = {
					check_key = { lhs = Tmp_0 value = 0.01 }
				}
				divide_key = { lhs = Tmp_0 value = 125 }
				if = {
					limit = {
						check_key = { lhs = Tmp_0 which = $class$_Wealth }
					}
					set_key = { lhs = Tmp_0 which = $class$_Wealth }
				}
				change_key = { lhs = Infra_Income which = Tmp_0 }
				change_key = { lhs = $class$_SpendInfra which = Tmp_0 }
			}
		}
    }
}

Infra_GetAppealInfra = {
    if = {
        limit = {
            OR = {
                check_key = { lhs = Infra_$type$Decay value = 0.1 }
                check_key = { lhs = Infra_$type$ value = 6 }

                Infra_Can$type$ = no
            }
        }
        set_key = { lhs = $return$ value = -1 }
    }
    else = {
        set_key = { lhs = $return$ value = 0 }

        Infra_GetAppealHelper = { class = NO weight = $weightNO$ return = $return$ [[rural] rural = $rural$ ] [[urban] urban = $urban$ ] [[nomad] nomad = $nomad$ ] }
        Infra_GetAppealHelper = { class = BG weight = $weightBG$ return = $return$ [[rural] rural = $rural$ ] [[urban] urban = $urban$ ] [[nomad] nomad = $nomad$ ] }
        Infra_GetAppealHelper = { class = CL weight = $weightCL$ return = $return$ [[rural] rural = $rural$ ] [[urban] urban = $urban$ ] [[nomad] nomad = $nomad$ ] }
        

        Infra_GetCostBuild$type$ = yes

        multiply_key = { lhs = Infra_Cost6 which = TN_ProvPrc6 }
        multiply_key = { lhs = Infra_Cost22 which = TN_ProvPrc22 }
        multiply_key = { lhs = Infra_Cost23 which = TN_ProvPrc23 }
        multiply_key = { lhs = Infra_Cost24 which = TN_ProvPrc24 }
        multiply_key = { lhs = Infra_Cost41 which = TN_ProvPrc41 }

        multiply_key = { lhs = Infra_CostR which = Class_PR }
        multiply_key = { lhs = Infra_CostUL which = Class_PUL }

        set_key = { lhs = Tmp_9 which = Infra_Cost6 }
        change_key = { lhs = Tmp_9 which = Infra_Cost22 }
        change_key = { lhs = Tmp_9 which = Infra_Cost23 }
        change_key = { lhs = Tmp_9 which = Infra_Cost24 }
        change_key = { lhs = Tmp_9 which = Infra_Cost41 }
		
        change_key = { lhs = Tmp_9 which = Infra_CostR }
        change_key = { lhs = Tmp_9 which = Infra_CostUL }

        divide_key = { lhs = $return$ which = Tmp_9 }

        set_key = { lhs = Tmp_9 which = Infra_$type$Goal }
        subtract_key = { lhs = Tmp_9 which = Infra_$type$Size }

        divide_key = { lhs = $return$ which = Tmp_9 }
		
		set_key = { lhs = Tmp_9 which = Infra_$type$ }
		change_key = { lhs = Tmp_9 value = 1 }
		
		divide_key = { lhs = $return$ which = Tmp_9 }

        set_key = { lhs = Infra_Cost6 value = 0 }
        set_key = { lhs = Infra_Cost22 value = 0 }
        set_key = { lhs = Infra_Cost23 value = 0 }
        set_key = { lhs = Infra_Cost24 value = 0 }
        set_key = { lhs = Infra_Cost41 value = 0 }
        set_key = { lhs = Infra_CostR value = 0 }
        set_key = { lhs = Infra_CostUL value = 0 }
        set_key = { lhs = Tmp_9 value = 0 }
    }
}
Infra_GetAppealInfraAmenities = {
    if = {
        limit = {
            OR = {
                check_key = { lhs = Infra_$type$Decay value = 0.1 }
                check_key = { lhs = Infra_$type$ value = 6 }

               
            }
        }
        set_key = { lhs = $return$ value = -1 }
    }
    else = {
        set_key = { lhs = $return$ value = 0 }

        Infra_GetAppealHelperAmenities = { class = NO weight = $weightNO$ return = $return$ [[rural] rural = $rural$ ] [[urban] urban = $urban$ ] [[nomad] nomad = $nomad$ ] }
        Infra_GetAppealHelperAmenities = { class = BG weight = $weightBG$ return = $return$ [[rural] rural = $rural$ ] [[urban] urban = $urban$ ] [[nomad] nomad = $nomad$ ] }
        Infra_GetAppealHelperAmenities = { class = CL weight = $weightCL$ return = $return$ [[rural] rural = $rural$ ] [[urban] urban = $urban$ ] [[nomad] nomad = $nomad$ ] }

		if = { limit = { is_key_equal = { lhs = Infra_Amenities value = 1 } } set_key = { lhs = Public_Tmp0 value = 10 } }
		else_if = { limit = { is_key_equal = { lhs = Infra_Amenities value = 2 } } set_key = { lhs = Public_Tmp0 value = 30 } }
		else_if = { limit = { is_key_equal = { lhs = Infra_Amenities value = 3 } } set_key = { lhs = Public_Tmp0 value = 80 } }
		else_if = { limit = { is_key_equal = { lhs = Infra_Amenities value = 4 } } set_key = { lhs = Public_Tmp0 value = 200 } }
		else_if = { limit = { is_key_equal = { lhs = Infra_Amenities value = 5 } } set_key = { lhs = Public_Tmp0 value = 500 } }
		else_if = { limit = { is_key_equal = { lhs = Infra_Amenities value = 6 } } set_key = { lhs = Public_Tmp0 value = 1000 } }
		else_if = { limit = { is_key_equal = { lhs = Infra_Amenities value = 7 } } set_key = { lhs = Public_Tmp0 value = 2000 } }

		## Multiply pre cost appeal by a modifier based on how much a city is over it's amenities limit
		# Formula: ((Diff to Cap * -1) / 75) + 1
		if = {
			limit = {
				check_key = { lhs = RE_Total which = Public_Tmp0 }
			}

			subtract_key = { lhs = Public_Tmp0 which = RE_Total }
			multiply_key = { lhs = Public_Tmp0 value = -1 }
			divide_key = { lhs = Public_Tmp0 value = 75 }
			change_key = { lhs = Public_Tmp0 value = 1 }

			if = {
				limit = {
					check_key = { lhs = Public_Tmp0 value = 3 }
				}
				set_key = { lhs = Public_Tmp0 value = 3 }
			}
			else_if = {
				limit = {
					NOT = { check_key = { lhs = Public_Tmp0 value = 1 } }
				}
				set_key = { lhs = Public_Tmp0 value = 1 }
			}

			multiply_key = { lhs = Tmp_9 which = Public_Tmp0 }
			set_key = { lhs = Public_Tmp0 value = 0 }

		}

        Infra_GetCostBuild$type$ = yes

        multiply_key = { lhs = Infra_Cost6 which = TN_ProvPrc6 }
        multiply_key = { lhs = Infra_Cost22 which = TN_ProvPrc22 }
        multiply_key = { lhs = Infra_Cost23 which = TN_ProvPrc23 }
        multiply_key = { lhs = Infra_Cost24 which = TN_ProvPrc24 }
        multiply_key = { lhs = Infra_Cost41 which = TN_ProvPrc41 }

        multiply_key = { lhs = Infra_CostR which = Class_PR }
        multiply_key = { lhs = Infra_CostUL which = Class_PUL }

        set_key = { lhs = Tmp_9 which = Infra_Cost6 }
        change_key = { lhs = Tmp_9 which = Infra_Cost22 }
        change_key = { lhs = Tmp_9 which = Infra_Cost23 }
        change_key = { lhs = Tmp_9 which = Infra_Cost24 }
        change_key = { lhs = Tmp_9 which = Infra_Cost41 }
		
        change_key = { lhs = Tmp_9 which = Infra_CostR }
        change_key = { lhs = Tmp_9 which = Infra_CostUL }

        divide_key = { lhs = $return$ which = Tmp_9 }

        set_key = { lhs = Tmp_9 which = Infra_$type$Goal }
        subtract_key = { lhs = Tmp_9 which = Infra_$type$Size }

        divide_key = { lhs = $return$ which = Tmp_9 }
		
		set_key = { lhs = Tmp_9 which = Infra_$type$ }
		change_key = { lhs = Tmp_9 value = 1 }
		
		divide_key = { lhs = $return$ which = Tmp_9 }
        
        

        set_key = { lhs = Infra_Cost6 value = 0 }
        set_key = { lhs = Infra_Cost22 value = 0 }
        set_key = { lhs = Infra_Cost23 value = 0 }
        set_key = { lhs = Infra_Cost24 value = 0 }
        set_key = { lhs = Infra_Cost41 value = 0 }
        set_key = { lhs = Infra_CostR value = 0 }
        set_key = { lhs = Infra_CostUL value = 0 }
        set_key = { lhs = Tmp_9 value = 0 }
    }
}

Infra_SetRankInfra = {
    set_key = { lhs = Infra_$type$ value = 0 }

    Infra_GetGoal$type$ = { inp = Infra_$type$ return = Infra_$type$Goal }
    
    while = {
        limit = {
            check_key = { lhs = Infra_$type$Size which = Infra_$type$Goal }

            NOT = {
                check_key = { lhs = Infra_$type$ value = 7 }
            }
        }
        change_key = { lhs = Infra_$type$ value = 1 }

        Infra_GetGoal$type$ = { inp = Infra_$type$ return = Infra_$type$Goal }
    }

    set_province_flag = Infra_Update
}

Infra_RefreshModifier = {
	if = {
		limit = {
			OR = {
				has_province_flag = Infra_S0
				has_province_flag = Infra_S1
				has_province_flag = Infra_S2
				has_province_flag = Infra_S3
				has_province_flag = Infra_S4
				has_province_flag = Infra_S5
				has_province_flag = Infra_S6
				has_province_flag = Infra_S7
				has_province_flag = Infra_S8
				has_province_flag = Infra_S9
			}
		}
        if = {
            limit = {
                NOT = { 
                    has_province_modifier = Construct_Modi 
                }
            }
            add_permanent_province_modifier = { name = Construct_Modi duration = -1 }
        }
	}
	else_if = {
		limit = {
			has_province_modifier = Construct_Modi
		}
        set_key = { lhs = Construct_Parallel value = 0 }
		remove_province_modifier = Construct_Modi
	}
}
Infra_UISet = {
	if = {
		limit = {
			PREV = { has_country_flag = Infra_$Infra$25 }
		}
		set_province_flag = Infra_$Infra$25
	}
	else = {
		clr_province_flag = Infra_$Infra$25
	}
	if = {
		limit = {
			PREV = { has_country_flag = Infra_$Infra$50 }
		}
		set_province_flag = Infra_$Infra$50
	}
	else = {
		clr_province_flag = Infra_$Infra$50
	}
	if = {
		limit = {
			PREV = { has_country_flag = Infra_$Infra$75 }
		}
		set_province_flag = Infra_$Infra$75
	}
	else = {
		clr_province_flag = Infra_$Infra$75
	}
	if = {
		limit = {
			PREV = { has_country_flag = Infra_$Infra$100 }
		}
		set_province_flag = Infra_$Infra$100
	}
	else = {
		clr_province_flag = Infra_$Infra$100
	}
}